"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import User, ObjectStatus, UserRole, PaymentSource, CompensationStatus, ExpenseType
from database.crud import (
    get_objects_by_status,
    get_object_by_id,
    update_object_status,
    get_expenses_by_object,
    get_expense_by_id,
    update_compensation_status,
    get_file_by_id
)
from bot.keyboards.objects_kb import (
    get_objects_list_keyboard,
    get_object_card_keyboard
)
from bot.keyboards.main_menu import get_confirm_keyboard
from bot.services.report_generator import generate_object_report

router = Router()


@router.callback_query(F.data.in_(["objects:active", "objects:completed"]))
async def show_objects_list(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ (—Ç–µ–∫—É—â–∏—Ö –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö)
    """
    await state.clear()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ callback_data
    status = ObjectStatus.ACTIVE if callback.data == "objects:active" else ObjectStatus.COMPLETED
    status_text = "–¢–µ–∫—É—â–∏–µ" if status == ObjectStatus.ACTIVE else "–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ –ë–î
    objects = await get_objects_by_status(session, status)
    
    if not objects:
        text = f"üìã <b>{status_text} –æ–±—ä–µ–∫—Ç—ã</b>\n\n–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
    else:
        text = f"üìã <b>{status_text} –æ–±—ä–µ–∫—Ç—ã</b>\n\n–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_objects_list_keyboard(objects, status)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("object:view:"))
async def show_object_card(callback: CallbackQuery, user: User, session: AsyncSession, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –æ–±—ä–µ–∫—Ç–∞
    """
    await state.clear()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data
    object_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
    obj = await get_object_by_id(session, object_id, load_relations=True)
    
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –æ–±—ä–µ–∫—Ç–∞ (relation –ø–æ–¥–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–∏ load_relations=True)
    files = getattr(obj, "files", []) or []
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report_text = generate_object_report(obj, files)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        report_text,
        parse_mode="HTML",
        reply_markup=get_object_card_keyboard(object_id, obj.status, user.role)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("object:complete_request:"))
async def confirm_complete_object(callback: CallbackQuery, user: User, session: AsyncSession):
    """
    –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    """
    
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    object_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç
    obj = await get_object_by_id(session, object_id, load_relations=False)
    
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—ä–µ–∫—Ç:\n"
        f"<b>{obj.name}</b>?\n\n"
        f"–û–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª '–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã'.",
        parse_mode="HTML",
        reply_markup=get_confirm_keyboard(f"object:complete:confirm:{object_id}", "object:complete:cancel")
    )
    await callback.answer()


@router.callback_query(F.data.startswith("object:complete:confirm:"))
async def complete_object(callback: CallbackQuery, user: User, session: AsyncSession):
    """
    –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—ä–µ–∫—Ç
    """
    await callback.answer()  # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    
    if user.role != UserRole.ADMIN:
        await callback.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    object_id = int(callback.data.split(":")[3])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞
    obj = await update_object_status(session, object_id, ObjectStatus.COMPLETED)
    
    if not obj:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞")
        return
    
    await callback.message.edit_text(
        f"‚úÖ <b>–û–±—ä–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
        f"–û–±—ä–µ–∫—Ç <b>{obj.name}</b> —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª '–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã'.",
        parse_mode="HTML"
    )


@router.callback_query(F.data == "object:complete:cancel")
async def cancel_complete_object(callback: CallbackQuery):
    """
    –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    """
    await callback.message.edit_text(
        "‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


@router.callback_query(F.data.startswith("object:restore:"))
async def confirm_restore_object(callback: CallbackQuery, user: User, session: AsyncSession):
    """
    –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ —Ç–µ–∫—É—â–∏–µ
    """
    
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    object_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç
    obj = await get_object_by_id(session, object_id, load_relations=False)
    
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–í–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞ –≤ —Ç–µ–∫—É—â–∏–µ</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç:\n"
        f"<b>{obj.name}</b>\n\n"
        f"–≤ —Ä–∞–∑–¥–µ–ª '–¢–µ–∫—É—â–∏–µ –æ–±—ä–µ–∫—Ç—ã'?",
        parse_mode="HTML",
        reply_markup=get_confirm_keyboard(f"object:restore:confirm:{object_id}", "object:restore:cancel")
    )
    await callback.answer()


@router.callback_query(F.data.startswith("object:restore:confirm:"))
async def restore_object(callback: CallbackQuery, user: User, session: AsyncSession):
    """
    –í–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç –≤ —Ç–µ–∫—É—â–∏–µ
    """
    
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    object_id = int(callback.data.split(":")[3])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞
    obj = await update_object_status(session, object_id, ObjectStatus.ACTIVE)
    
    if not obj:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±—ä–µ–∫—Ç–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"‚úÖ <b>–û–±—ä–µ–∫—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω</b>\n\n"
        f"–û–±—ä–µ–∫—Ç <b>{obj.name}</b> —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª '–¢–µ–∫—É—â–∏–µ –æ–±—ä–µ–∫—Ç—ã'.",
        parse_mode="HTML"
    )
    await callback.answer("‚úÖ –û–±—ä–µ–∫—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω")


@router.callback_query(F.data == "object:restore:cancel")
async def cancel_restore_object(callback: CallbackQuery):
    """
    –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞
    """
    await callback.message.edit_text(
        "‚ùå –í–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω."
    )
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


@router.callback_query(F.data.startswith("object:view_expenses:"))
async def view_expenses_list(callback: CallbackQuery, user: User, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ–±—ä–µ–∫—Ç–∞"""
    
    object_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç
    obj = await get_object_by_id(session, object_id, load_relations=False)
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã
    expenses = await get_expenses_by_object(session, object_id)
    
    if not expenses:
        await callback.message.edit_text(
            f"üìã <b>–†–∞—Å—Ö–æ–¥—ã –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
            f"üèóÔ∏è {obj.name}\n\n"
            f"–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"object:view:{object_id}")]
            ])
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å –∏–∫–æ–Ω–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    from bot.services.calculations import format_currency
    
    text = f"üìã <b>–†–∞—Å—Ö–æ–¥—ã –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
    text += f"üèóÔ∏è {obj.name}\n"
    text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
    supplies = [e for e in expenses if e.type == ExpenseType.SUPPLIES]
    transport = [e for e in expenses if e.type == ExpenseType.TRANSPORT]
    overhead = [e for e in expenses if e.type == ExpenseType.OVERHEAD]
    
    expense_groups = [
        ("üß∞ –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏", supplies),
        ("üöö –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", transport),
        ("üßæ –ù–∞–∫–ª–∞–¥–Ω—ã–µ", overhead)
    ]
    
    builder = InlineKeyboardButton
    buttons = []
    
    for emoji_title, exp_list in expense_groups:
        if exp_list:
            text += f"\n{emoji_title}:\n"
            for exp in exp_list[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 —Ä–∞—Å—Ö–æ–¥–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                # –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
                if exp.payment_source == PaymentSource.PERSONAL:
                    if exp.compensation_status == CompensationStatus.PENDING:
                        status_icon = "‚è≥"  # –ö –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
                        status_text = "–ö –≤–æ–∑–º–µ—â–µ–Ω–∏—é –ø—Ä–æ—Ä–∞–±—É"
                    else:
                        status_icon = "‚úÖ"  # –ö–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ
                        status_text = "–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
                else:
                    status_icon = "üí≥"  # –û–ø–ª–∞—á–µ–Ω–æ —Ñ–∏—Ä–º–æ–π
                    status_text = "–û–ø–ª–∞—á–µ–Ω–æ —Å –∫–∞—Ä—Ç—ã –ò–ü"

                has_receipt = bool(exp.photo_url and exp.photo_url.startswith("file_"))
                receipt_note = " ‚Ä¢ üìé –ß–µ–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω" if has_receipt else ""
                button_receipt_icon = " üìé" if has_receipt else ""

                date_str = exp.date.strftime("%d.%m")
                text += f"\n{status_icon} {date_str} ‚Ä¢ {format_currency(exp.amount)}\n"
                text += f"   {exp.description[:50]}\n"
                text += f"   <i>{status_text}{receipt_note}</i>\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                buttons.append([
                    InlineKeyboardButton(
                        text=f"{status_icon}{button_receipt_icon} {date_str} - {format_currency(exp.amount)}",
                        callback_data=f"expense:detail:{exp.id}"
                    )
                ])
    
    text += f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    text += f"–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {len(expenses)}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"object:view:{object_id}")])
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons[:15])  # –õ–∏–º–∏—Ç –∫–Ω–æ–ø–æ–∫
    )
    await callback.answer()


@router.callback_query(F.data.startswith("expense:detail:"))
async def view_expense_detail(callback: CallbackQuery, user: User, session: AsyncSession):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–∞"""
    
    expense_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥
    expense = await get_expense_by_id(session, expense_id)
    if not expense:
        await callback.answer("‚ùå –†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    from bot.services.calculations import format_currency
    
    type_names = {
        ExpenseType.SUPPLIES: "üß∞ –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏",
        ExpenseType.TRANSPORT: "üöö –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
        ExpenseType.OVERHEAD: "üßæ –ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"
    }
    
    # –ò–∫–æ–Ω–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å
    if expense.payment_source == PaymentSource.PERSONAL:
        if expense.compensation_status == CompensationStatus.PENDING:
            status_icon = "‚è≥"
            status_text = "–ö –≤–æ–∑–º–µ—â–µ–Ω–∏—é –ø—Ä–æ—Ä–∞–±—É"
            can_compensate = user.role == UserRole.ADMIN
        else:
            status_icon = "‚úÖ"
            status_text = "–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
            can_compensate = False
    else:
        status_icon = "üí≥"
        status_text = "–û–ø–ª–∞—á–µ–Ω–æ —Å –∫–∞—Ä—Ç—ã –ò–ü"
        can_compensate = False
    
    has_receipt = bool(expense.photo_url and expense.photo_url.startswith("file_"))

    text = f"{status_icon} <b>–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞</b>\n\n"
    text += f"–¢–∏–ø: {type_names.get(expense.type, expense.type)}\n"
    text += f"üí∞ –°—É–º–º–∞: {format_currency(expense.amount)}\n"
    text += f"üìÖ –î–∞—Ç–∞: {expense.date.strftime('%d.%m.%Y')}\n"
    text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {expense.description}\n"
    text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    text += f"–°—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n"
    if has_receipt:
        text += "üìé –ß–µ–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω ‚Äî —Å–º. —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ\n"
 
    # –ö–Ω–æ–ø–∫–∏
    buttons = []
 
    # –ï—Å–ª–∏ –∫ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
    if can_compensate:
        buttons.append([
            InlineKeyboardButton(
                text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ",
                callback_data=f"expense:compensate:{expense_id}"
            )
        ])
 
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    buttons.append([
        InlineKeyboardButton(
            text="üîô –ö —Å–ø–∏—Å–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤",
            callback_data=f"object:view_expenses:{expense.object_id}"
        )
    ])
 
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )

    if has_receipt:
        receipt_id = None
        try:
            receipt_id = int(expense.photo_url.split("_", 1)[1])
        except (ValueError, IndexError):
            receipt_id = None

        if receipt_id:
            receipt_file = await get_file_by_id(session, receipt_id)
            if receipt_file and receipt_file.file_data:
                size_kb = (receipt_file.file_size or 0) // 1024
                caption = (
                    f"üìé <b>–ß–µ–∫ –ø–æ —Ä–∞—Å—Ö–æ–¥—É</b>\n"
                    f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {receipt_file.uploaded_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üì¶ –†–∞–∑–º–µ—Ä: {size_kb} –ö–ë"
                )
                photo = BufferedInputFile(
                    receipt_file.file_data,
                    filename=receipt_file.filename or "receipt.jpg"
                )
                await callback.message.answer_photo(
                    photo=photo,
                    caption=caption,
                    parse_mode="HTML"
                )
            else:
                await callback.message.answer("‚ö†Ô∏è –ß–µ–∫ –±—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

    await callback.answer()


@router.callback_query(F.data.startswith("expense:compensate:"))
async def compensate_expense(callback: CallbackQuery, user: User, session: AsyncSession):
    """–û—Ç–º–µ—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ –∫–∞–∫ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"""
    
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    expense_id = int(callback.data.split(":")[2])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    expense = await update_compensation_status(session, expense_id, CompensationStatus.COMPENSATED)
    
    if not expense:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
        return
    
    await callback.answer("‚úÖ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –æ—Ç–º–µ—á–µ–Ω–∞!", show_alert=True)
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    await view_expense_detail(callback, user, session)


"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import User, ObjectStatus, UserRole
from database.crud import (
    get_objects_by_status,
    get_object_by_id,
    update_object_status,
    get_files_by_object
)
from bot.keyboards.objects_kb import (
    get_objects_list_keyboard,
    get_object_card_keyboard
)
from bot.keyboards.main_menu import get_confirm_keyboard
from bot.services.report_generator import generate_object_report

router = Router()


@router.callback_query(F.data.in_(["objects:active", "objects:completed"]))
async def show_objects_list(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ (—Ç–µ–∫—É—â–∏—Ö –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö)
    """
    await state.clear()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ callback_data
    status = ObjectStatus.ACTIVE if callback.data == "objects:active" else ObjectStatus.COMPLETED
    status_text = "–¢–µ–∫—É—â–∏–µ" if status == ObjectStatus.ACTIVE else "–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ –ë–î
    objects = await get_objects_by_status(session, status)
    
    if not objects:
        text = f"üìã <b>{status_text} –æ–±—ä–µ–∫—Ç—ã</b>\n\n–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
    else:
        text = f"üìã <b>{status_text} –æ–±—ä–µ–∫—Ç—ã</b>\n\n–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_objects_list_keyboard(objects, status)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("object:view:"))
async def show_object_card(callback: CallbackQuery, user: User, session: AsyncSession, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –æ–±—ä–µ–∫—Ç–∞
    """
    await state.clear()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data
    object_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
    obj = await get_object_by_id(session, object_id, load_relations=True)
    
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã
    files = await get_files_by_object(session, object_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report_text = generate_object_report(obj, files)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        report_text,
        parse_mode="HTML",
        reply_markup=get_object_card_keyboard(object_id, obj.status, user.role)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("object:complete:"))
async def confirm_complete_object(callback: CallbackQuery, user: User, session: AsyncSession):
    """
    –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    """
    
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    object_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç
    obj = await get_object_by_id(session, object_id, load_relations=False)
    
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—ä–µ–∫—Ç:\n"
        f"<b>{obj.name}</b>?\n\n"
        f"–û–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª '–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã'.",
        parse_mode="HTML",
        reply_markup=get_confirm_keyboard(f"object:complete:confirm:{object_id}", "object:complete:cancel")
    )
    await callback.answer()


@router.callback_query(F.data.startswith("object:complete:confirm:"))
async def complete_object(callback: CallbackQuery, user: User, session: AsyncSession):
    """
    –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—ä–µ–∫—Ç
    """
    await callback.answer()  # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    
    if user.role != UserRole.ADMIN:
        await callback.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    object_id = int(callback.data.split(":")[3])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞
    obj = await update_object_status(session, object_id, ObjectStatus.COMPLETED)
    
    if not obj:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞")
        return
    
    await callback.message.edit_text(
        f"‚úÖ <b>–û–±—ä–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
        f"–û–±—ä–µ–∫—Ç <b>{obj.name}</b> —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª '–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã'.",
        parse_mode="HTML"
    )


@router.callback_query(F.data == "object:complete:cancel")
async def cancel_complete_object(callback: CallbackQuery):
    """
    –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    """
    await callback.message.edit_text(
        "‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


@router.callback_query(F.data.startswith("object:restore:"))
async def confirm_restore_object(callback: CallbackQuery, user: User, session: AsyncSession):
    """
    –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ —Ç–µ–∫—É—â–∏–µ
    """
    
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    object_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç
    obj = await get_object_by_id(session, object_id, load_relations=False)
    
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–í–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞ –≤ —Ç–µ–∫—É—â–∏–µ</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç:\n"
        f"<b>{obj.name}</b>\n\n"
        f"–≤ —Ä–∞–∑–¥–µ–ª '–¢–µ–∫—É—â–∏–µ –æ–±—ä–µ–∫—Ç—ã'?",
        parse_mode="HTML",
        reply_markup=get_confirm_keyboard(f"object:restore:confirm:{object_id}", "object:restore:cancel")
    )
    await callback.answer()


@router.callback_query(F.data.startswith("object:restore:confirm:"))
async def restore_object(callback: CallbackQuery, user: User, session: AsyncSession):
    """
    –í–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç –≤ —Ç–µ–∫—É—â–∏–µ
    """
    
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    object_id = int(callback.data.split(":")[3])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞
    obj = await update_object_status(session, object_id, ObjectStatus.ACTIVE)
    
    if not obj:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±—ä–µ–∫—Ç–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"‚úÖ <b>–û–±—ä–µ–∫—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω</b>\n\n"
        f"–û–±—ä–µ–∫—Ç <b>{obj.name}</b> —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª '–¢–µ–∫—É—â–∏–µ –æ–±—ä–µ–∫—Ç—ã'.",
        parse_mode="HTML"
    )
    await callback.answer("‚úÖ –û–±—ä–µ–∫—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω")


@router.callback_query(F.data == "object:restore:cancel")
async def cancel_restore_object(callback: CallbackQuery):
    """
    –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞
    """
    await callback.message.edit_text(
        "‚ùå –í–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω."
    )
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


@router.callback_query(F.data.startswith("object:view_receipts:"))
async def view_receipts(callback: CallbackQuery, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —á–µ–∫–∏ –∏ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞
    """
    await callback.answer()
    
    object_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç
    obj = await get_object_by_id(session, object_id, load_relations=False)
    
    if not obj:
        await callback.message.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞
    from database.models import FileType
    files = await get_files_by_object(session, object_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —á–µ–∫–∏
    receipts = [f for f in files if f.file_type == FileType.RECEIPT]
    
    if not receipts:
        await callback.message.edit_text(
            f"üì∏ <b>–ß–µ–∫–∏ –æ–±—ä–µ–∫—Ç–∞: {obj.name}</b>\n\n"
            f"‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —á–µ–∫–æ–≤\n\n"
            f"–ß–µ–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å —Ñ–æ—Ç–æ.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"object:view:{object_id}")]
            ])
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —á–µ–∫–æ–≤
    text = f"üì∏ <b>–ß–µ–∫–∏ –æ–±—ä–µ–∫—Ç–∞: {obj.name}</b>\n\n"
    text += f"–í—Å–µ–≥–æ —á–µ–∫–æ–≤: {len(receipts)}\n\n"
    
    for i, receipt in enumerate(receipts[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        date_str = receipt.uploaded_at.strftime("%d.%m.%Y %H:%M")
        size_kb = (receipt.file_size or 0) // 1024
        text += f"{i}. {receipt.filename or '–ß–µ–∫'} ({size_kb} –ö–ë)\n"
        text += f"   üìÖ {date_str}\n\n"
    
    if len(receipts) > 10:
        text += f"... –∏ –µ—â—ë {len(receipts) - 10} —á–µ–∫–æ–≤\n\n"
    
    text += "üí° –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —á–µ–∫–æ–≤
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 —á–µ–∫–æ–≤
    for i, receipt in enumerate(receipts[:5], 1):
        builder.row(
            InlineKeyboardButton(
                text=f"üì∑ –ß–µ–∫ #{i}",
                callback_data=f"receipt:view:{receipt.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"object:view:{object_id}")
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("receipt:view:"))
async def view_single_receipt(callback: CallbackQuery, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–µ–∫
    """
    await callback.answer()
    
    file_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ –ë–î
    from database.crud import get_file_by_id
    from aiogram.types import BufferedInputFile
    
    file = await get_file_by_id(session, file_id)
    
    if not file or not file.file_data:
        await callback.message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    try:
        photo = BufferedInputFile(
            file.file_data,
            filename=file.filename or "receipt.jpg"
        )
        
        caption = f"üì∏ <b>{file.filename or '–ß–µ–∫'}</b>\n\n"
        caption += f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {file.uploaded_at.strftime('%d.%m.%Y %H:%M')}\n"
        caption += f"üì¶ –†–∞–∑–º–µ—Ä: {(file.file_size or 0) // 1024} –ö–ë"
        
        await callback.message.answer_photo(
            photo=photo,
            caption=caption,
            parse_mode="HTML"
        )
        
        await callback.message.answer(
            "üëÜ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —á–µ–∫–æ–≤", callback_data=f"object:view_receipts:{file.object_id}")]
            ])
        )
        
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞: {str(e)}")


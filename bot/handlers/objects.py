"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤
"""
import math
import hashlib
from collections import defaultdict
from datetime import datetime
from decimal import Decimal, InvalidOperation
from typing import Optional

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import (
    User,
    ObjectStatus,
    UserRole,
    PaymentSource,
    CompensationStatus,
    ExpenseType,
    ObjectLogType,
    FileType,
)
from database.crud import (
    get_objects_by_status,
    get_object_by_id,
    update_object_status,
    get_expenses_by_object,
    get_expense_by_id,
    update_compensation_status,
    get_file_by_id,
    get_advances_by_object,
    delete_expense,
    update_expense,
    get_advance_by_id,
    update_advance,
    delete_advance,
    create_object_log,
    get_object_logs,
    delete_object,
    get_files_by_object,
)
from bot.keyboards.objects_kb import (
    get_objects_list_keyboard,
    get_object_card_keyboard
)
from bot.keyboards.main_menu import get_confirm_keyboard, get_cancel_button
from bot.services.report_generator import generate_object_report
from bot.services.calculations import format_currency
from bot.states.expense_states import EditExpenseStates, EditAdvanceStates
from bot.states.object_document_states import ObjectDocumentStates
from bot.utils.messaging import delete_message, send_new_message, get_bot_username
from bot.services.file_service import FileService

router = Router()


EXPENSES_PAGE_SIZE = 10
ADVANCES_WORK_PAGE_SIZE = 10
LOGS_PAGE_SIZE = 10
UNSPECIFIED_WORK_TYPE_LABEL = "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤–∏–¥–∞ —Ä–∞–±–æ—Ç"
DEFAULT_WORK_TYPE_TOKEN = "default"
DEFAULT_EXPENSE_TYPE_TOKEN = "all"


EXPENSE_TYPE_ICONS = {
    ExpenseType.SUPPLIES: "üß∞",
    ExpenseType.TRANSPORT: "üöö",
    ExpenseType.OVERHEAD: "üßæ",
}


EXPENSE_TYPE_TOKENS = {
    ExpenseType.SUPPLIES: "supplies",
    ExpenseType.TRANSPORT: "transport",
    ExpenseType.OVERHEAD: "overhead",
}

EXPENSE_TOKEN_TO_TYPE = {value: key for key, value in EXPENSE_TYPE_TOKENS.items()}


DOCUMENT_TYPES_ORDER = ["estimate", "payroll"]

DOCUMENT_TYPE_INFO = {
    "estimate": {
        "icon": "üìë",
        "label": "–°–º–µ—Ç—ã",
        "singular": "—Å–º–µ—Ç—É",
        "file_type": FileType.ESTIMATE,
    },
    "payroll": {
        "icon": "üë∑‚Äç‚ôÇÔ∏è",
        "label": "–§–ó–ü",
        "singular": "–§–ó–ü",
        "file_type": FileType.PAYROLL,
    },
}

FILE_TYPE_TO_DOCUMENT_TOKEN = {
    info["file_type"]: token for token, info in DOCUMENT_TYPE_INFO.items()
}


def _expense_type_label(expense_type: ExpenseType) -> str:
    mapping = {
        ExpenseType.SUPPLIES: "–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏",
        ExpenseType.TRANSPORT: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        ExpenseType.OVERHEAD: "–ù–∞–∫–ª–∞–¥–Ω—ã–µ",
    }
    return mapping.get(expense_type, expense_type.value)


def _expense_type_token(expense_type: ExpenseType) -> str:
    return EXPENSE_TYPE_TOKENS.get(expense_type, DEFAULT_EXPENSE_TYPE_TOKEN)


def _expense_type_from_token(token: str) -> ExpenseType | None:
    return EXPENSE_TOKEN_TO_TYPE.get(token)


def _document_info(token: str) -> dict | None:
    return DOCUMENT_TYPE_INFO.get(token)


def _document_file_type(token: str) -> FileType | None:
    info = _document_info(token)
    if not info:
        return None
    return info["file_type"]


def group_document_files(files) -> dict[str, list]:
    grouped: dict[str, list] = {token: [] for token in DOCUMENT_TYPES_ORDER}
    for file in files or []:
        token = FILE_TYPE_TO_DOCUMENT_TOKEN.get(file.file_type)
        if token:
            grouped.setdefault(token, []).append(file)
    return grouped


def document_counts(grouped: dict[str, list]) -> dict[str, int]:
    return {token: len(grouped.get(token, [])) for token in DOCUMENT_TYPES_ORDER}


def _format_file_size(size: Optional[int]) -> str:
    if not size or size <= 0:
        return "‚Äî"
    units = ["–ë", "–ö–ë", "–ú–ë", "–ì–ë"]
    value = float(size)
    for unit in units:
        if value < 1024 or unit == units[-1]:
            return f"{value:.1f} {unit}" if unit != "–ë" else f"{int(value)} {unit}"
        value /= 1024
    return f"{value:.1f} –ì–ë"


def _get_expense_status(expense):
    if expense.payment_source == PaymentSource.PERSONAL:
        if expense.compensation_status == CompensationStatus.COMPENSATED:
            return "‚úÖ", "–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        return "‚è≥", "–ö –≤–æ–∑–º–µ—â–µ–Ω–∏—é –ø—Ä–æ—Ä–∞–±—É"
    return "üí≥", "–û–ø–ª–∞—á–µ–Ω–æ —Å –∫–∞—Ä—Ç—ã –ò–ü"


def _normalize_page(page: int, total_pages: int) -> int:
    if total_pages <= 0:
        return 1
    return max(1, min(page, total_pages))


def _build_navigation_buttons(prefix: str, object_id: int, page: int, total_pages: int) -> list[InlineKeyboardButton]:
    buttons: list[InlineKeyboardButton] = []
    if page > 1:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"{prefix}:{object_id}:{page - 1}"))
    if page < total_pages:
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"{prefix}:{object_id}:{page + 1}"))
    return buttons


def _build_token_navigation(prefix: str, object_id: int, page: int, total_pages: int, token: str) -> list[InlineKeyboardButton]:
    buttons: list[InlineKeyboardButton] = []
    if page > 1:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"{prefix}:{object_id}:{page - 1}:{token}"))
    if page < total_pages:
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"{prefix}:{object_id}:{page + 1}:{token}"))
    return buttons


def _normalize_work_type(value: str | None) -> str:
    return (_display_work_type(value)).lower()


def _display_work_type(value: str | None) -> str:
    cleaned = (value or "").strip()
    return cleaned or UNSPECIFIED_WORK_TYPE_LABEL


def _make_work_type_token(value: str | None) -> str:
    normalized = _normalize_work_type(value)
    if not normalized:
        return DEFAULT_WORK_TYPE_TOKEN
    digest = hashlib.sha1(normalized.encode("utf-8")).hexdigest()
    return digest[:16]


def _is_default_work_type_token(token: str | None) -> bool:
    return not token or token == DEFAULT_WORK_TYPE_TOKEN


def _format_user_name(user: User | None) -> str:
    if not user:
        return "–°–∏—Å—Ç–µ–º–∞"
    return user.full_name or user.username or f"ID {user.telegram_id}"


async def _log_object_action(
    session: AsyncSession,
    object_id: int,
    action: ObjectLogType,
    description: str,
    user_id: Optional[int] = None,
) -> None:
    await create_object_log(
        session=session,
        object_id=object_id,
        action=action,
        description=description,
        user_id=user_id,
    )


def build_documents_menu_content(
    object_id: int,
    object_name: str,
    counts: dict[str, int],
) -> tuple[str, InlineKeyboardMarkup]:
    lines = [
        "üìÅ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—ä–µ–∫—Ç–∞</b>",
        f"üèóÔ∏è {object_name}",
        "",
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª:",
        "",
    ]

    for token in DOCUMENT_TYPES_ORDER:
        info = DOCUMENT_TYPE_INFO[token]
        count = counts.get(token, 0)
        lines.append(f"{info['icon']} {info['label']}: {count} —à—Ç.")

    keyboard = InlineKeyboardBuilder()

    for token in DOCUMENT_TYPES_ORDER:
        info = DOCUMENT_TYPE_INFO[token]
        count = counts.get(token, 0)
        keyboard.row(
            InlineKeyboardButton(
                text=f"{info['icon']} {info['label']} ({count})",
                callback_data=f"object:documents:list:{object_id}:{token}"
            )
        )

    for token in DOCUMENT_TYPES_ORDER:
        info = DOCUMENT_TYPE_INFO[token]
        keyboard.row(
            InlineKeyboardButton(
                text=f"‚ûï {info['icon']} –î–æ–±–∞–≤–∏—Ç—å {info['singular']}",
                callback_data=f"object:documents:add:{object_id}:{token}"
            )
        )

    keyboard.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ",
            callback_data=f"object:view:{object_id}"
        )
    )

    return "\n".join(lines), keyboard.as_markup()


async def _send_expenses_overview(callback: CallbackQuery, session: AsyncSession, object_id: int) -> None:
    obj = await get_object_by_id(session, object_id, load_relations=False)
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    expenses = await get_expenses_by_object(session, object_id)

    if not expenses:
        await send_new_message(
            callback,
            f"üìã <b>–†–∞—Å—Ö–æ–¥—ã –æ–±—ä–µ–∫—Ç–∞</b>\n\nüèóÔ∏è {obj.name}\n\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"object:view:{object_id}")]]
            ),
        )
        return

    overall_total = sum((expense.amount for expense in expenses), Decimal(0))

    grouped: dict[ExpenseType, dict[str, object]] = {}
    for expense in expenses:
        bucket = grouped.setdefault(
            expense.type,
            {
                "total": Decimal(0),
                "count": 0,
                "personal_pending": 0,
                "personal_total": Decimal(0),
                "company_total": Decimal(0),
            },
        )
        bucket["total"] += expense.amount
        bucket["count"] += 1
        if expense.payment_source == PaymentSource.PERSONAL:
            bucket["personal_total"] += expense.amount
            if expense.compensation_status == CompensationStatus.PENDING:
                bucket["personal_pending"] += 1
        else:
            bucket["company_total"] += expense.amount

    type_rows = []
    for expense_type in [ExpenseType.SUPPLIES, ExpenseType.TRANSPORT, ExpenseType.OVERHEAD]:
        bucket = grouped.get(expense_type)
        if not bucket:
            continue
        label = EXPENSE_TYPE_TITLES.get(expense_type, expense_type.value)
        token = _expense_type_token(expense_type)
        total = bucket["total"]
        count = bucket["count"]
        pending = bucket["personal_pending"]
        personal_total = bucket["personal_total"]
        company_total = bucket["company_total"]

        summary_lines = [
            f"\n‚öôÔ∏è <b>{label}</b>",
            f"   üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_currency(total)}",
            f"   üìÑ –ó–∞–ø–∏—Å–µ–π: {count}",
        ]
        if personal_total > 0 or pending:
            summary_lines.append(
                f"   üë§ –û–ø–ª–∞—á–µ–Ω–æ –ø—Ä–æ—Ä–∞–±–æ–º: {format_currency(personal_total)}"
                + (f" ‚Ä¢ –∫ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏: {pending}" if pending else "")
            )
        if company_total > 0:
            summary_lines.append(f"   üí≥ –û–ø–ª–∞—á–µ–Ω–æ —Ñ–∏—Ä–º–æ–π: {format_currency(company_total)}")

        type_rows.append((label, token, summary_lines, total))

    lines = [
        "üìã <b>–†–∞—Å—Ö–æ–¥—ã –æ–±—ä–µ–∫—Ç–∞</b>",
        f"üèóÔ∏è {obj.name}",
        f"–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {len(expenses)}",
        f"–û–±—â–∞—è —Å—É–º–º–∞: {format_currency(overall_total)}",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        "üìä <b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>",
    ]

    keyboard = InlineKeyboardBuilder()
    for label, token, summary_lines, total in type_rows:
        lines.extend(summary_lines)
        keyboard.row(
            InlineKeyboardButton(
                text=f"{label} ‚Ä¢ {format_currency(total)}",
                callback_data=f"expense:type:{object_id}:1:{token}"
            )
        )

    keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"object:view:{object_id}"))

    await send_new_message(
        callback,
        "\n".join(lines),
        parse_mode="HTML",
        reply_markup=keyboard.as_markup(),
    )


async def _send_expenses_type_page(
    callback: CallbackQuery,
    session: AsyncSession,
    object_id: int,
    expense_token: str,
    page: int,
) -> None:
    obj = await get_object_by_id(session, object_id, load_relations=False)
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    expense_type = _expense_type_from_token(expense_token)
    if expense_type is None:
        await _send_expenses_overview(callback, session, object_id)
        return

    expenses = await get_expenses_by_object(session, object_id)
    filtered = [expense for expense in expenses if expense.type == expense_type]

    if not filtered:
        await _send_expenses_overview(callback, session, object_id)
        return

    total = len(filtered)
    total_pages = math.ceil(total / EXPENSES_PAGE_SIZE)
    page = _normalize_page(page, total_pages)
    start = (page - 1) * EXPENSES_PAGE_SIZE
    current_items = filtered[start:start + EXPENSES_PAGE_SIZE]

    total_amount = sum((expense.amount for expense in filtered), Decimal(0))
    personal_total = sum((expense.amount for expense in filtered if expense.payment_source == PaymentSource.PERSONAL), Decimal(0))
    company_total = total_amount - personal_total
    pending_count = sum(
        1
        for expense in filtered
        if expense.payment_source == PaymentSource.PERSONAL and expense.compensation_status == CompensationStatus.PENDING
    )

    label = EXPENSE_TYPE_TITLES.get(expense_type, expense_type.value)

    lines = [
        f"üìã <b>{label}</b>",
        f"üèóÔ∏è {obj.name}",
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        f"–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total}",
        f"–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {format_currency(total_amount)}",
        f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ —Ñ–∏—Ä–º–æ–π: {format_currency(company_total)}",
        f"üë§ –û–ø–ª–∞—á–µ–Ω–æ –ø—Ä–æ—Ä–∞–±–æ–º: {format_currency(personal_total)}",
    ]
    if pending_count:
        lines.append(f"‚è≥ –ö –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏: {pending_count}")

    lines.append("\nüìÑ –ó–∞–ø–∏—Å–∏:")

    keyboard = InlineKeyboardBuilder()
    for idx, expense in enumerate(current_items, start=start + 1):
        status_icon, status_text = _get_expense_status(expense)
        date_str = expense.date.strftime("%d.%m.%Y")
        amount_str = format_currency(expense.amount)
        has_receipt = bool(expense.photo_url and expense.photo_url.startswith("file_"))
        receipt_note = " ‚Ä¢ üìé –ß–µ–∫" if has_receipt else ""

        lines.append(
            f"\n{idx}. {status_icon} {date_str} ‚Ä¢ {amount_str}\n"
            f"   {expense.description[:80]}{receipt_note}\n"
            f"   <i>{status_text}</i>"
        )

        keyboard.row(
            InlineKeyboardButton(
                text=f"{status_icon} {amount_str} ‚Ä¢ {date_str}",
                callback_data=f"expense:detail:{expense.id}:{object_id}:{page}:{expense_token}"
            )
        )

    nav_buttons = _build_token_navigation("expense:type", object_id, page, total_pages, expense_token)
    if nav_buttons:
        keyboard.row(*nav_buttons)

    keyboard.row(
        InlineKeyboardButton(
            text="üîô –ö —Ç–∏–ø–∞–º —Ä–∞—Å—Ö–æ–¥–æ–≤",
            callback_data=f"object:view_expenses:{object_id}"
        )
    )

    await send_new_message(
        callback,
        "\n".join(lines),
        parse_mode="HTML",
        reply_markup=keyboard.as_markup(),
    )


async def _send_advances_overview(callback: CallbackQuery, session: AsyncSession, object_id: int) -> None:
    obj = await get_object_by_id(session, object_id, load_relations=False)
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    advances = await get_advances_by_object(session, object_id)

    if not advances:
        await send_new_message(
            callback,
            f"üìÑ <b>–ê–≤–∞–Ω—Å—ã –ø–æ –æ–±—ä–µ–∫—Ç—É</b>\n\nüèóÔ∏è {obj.name}\n\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–≤–∞–Ω—Å–æ–≤.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"object:view:{object_id}")]]
            ),
        )
        return

    overall_total = sum((advance.amount for advance in advances), Decimal(0))

    grouped: dict[str, dict[str, object]] = {}
    for advance in advances:
        normalized = _normalize_work_type(advance.work_type)
        display = _display_work_type(advance.work_type)
        token = _make_work_type_token(advance.work_type)
        bucket = grouped.setdefault(
            token,
            {
                "label": display,
                "total": Decimal(0),
                "count": 0,
                "min_date": None,
                "max_date": None,
                "token": token,
                "normalized": normalized,
            }
        )
        bucket["total"] += advance.amount
        bucket["count"] += 1
        if advance.date:
            if bucket["min_date"] is None or advance.date < bucket["min_date"]:
                bucket["min_date"] = advance.date
            if bucket["max_date"] is None or advance.date > bucket["max_date"]:
                bucket["max_date"] = advance.date

    groups = sorted(
        grouped.values(),
        key=lambda item: (item["label"].lower(), item["label"])
    )

    lines = [
        "üìÑ <b>–ê–≤–∞–Ω—Å—ã –ø–æ –æ–±—ä–µ–∫—Ç—É</b>",
        f"üèóÔ∏è {obj.name}",
        f"–í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ: {format_currency(overall_total)}",
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–ª–∞—Ç: {len(advances)}",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        "üìä <b>–ü–æ –≤–∏–¥–∞–º —Ä–∞–±–æ—Ç:</b>",
    ]

    keyboard = InlineKeyboardBuilder()
    for idx, bucket in enumerate(groups, start=1):
        label = str(bucket["label"])
        total = bucket["total"]
        count = bucket["count"]
        min_date = bucket["min_date"]
        max_date = bucket["max_date"]

        if min_date and max_date:
            period = f"{min_date.strftime('%d.%m.%Y')} ‚Äî {max_date.strftime('%d.%m.%Y')}"
        else:
            period = "‚Äî"

        lines.append(
            f"\n{idx}. ‚öí <b>{label}</b>\n"
            f"   üí∞ {format_currency(total)} ‚Ä¢ –≤—ã–ø–ª–∞—Ç: {count}\n"
            f"   üìÖ {period}"
        )

        keyboard.row(
            InlineKeyboardButton(
                text=f"‚öí {label} ‚Ä¢ {format_currency(total)}",
                callback_data=f"advance:worktype:{object_id}:1:{bucket['token']}"
            )
        )

    keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"object:view:{object_id}"))

    await send_new_message(
        callback,
        "\n".join(lines),
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )


async def _send_advances_worktype_page(
    callback: CallbackQuery,
    session: AsyncSession,
    object_id: int,
    work_type_token: str,
    page: int,
) -> None:
    obj = await get_object_by_id(session, object_id, load_relations=False)
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    advances = await get_advances_by_object(session, object_id)

    grouped: dict[str, dict[str, object]] = {}
    for advance in advances:
        token = _make_work_type_token(advance.work_type)
        bucket = grouped.setdefault(
            token,
            {
                "label": _display_work_type(advance.work_type),
                "advances": [],
                "min_date": None,
                "max_date": None,
            }
        )
        bucket["advances"].append(advance)
        if advance.date:
            if bucket["min_date"] is None or advance.date < bucket["min_date"]:
                bucket["min_date"] = advance.date
            if bucket["max_date"] is None or advance.date > bucket["max_date"]:
                bucket["max_date"] = advance.date

    bucket = grouped.get(work_type_token)
    if not bucket:
        await _send_advances_overview(callback, session, object_id)
        return

    filtered = bucket["advances"]
    label = bucket["label"]
    total = len(filtered)
    total_pages = math.ceil(total / ADVANCES_WORK_PAGE_SIZE)
    page = _normalize_page(page, total_pages)
    start = (page - 1) * ADVANCES_WORK_PAGE_SIZE
    current_items = filtered[start:start + ADVANCES_WORK_PAGE_SIZE]

    total_amount = sum((advance.amount for advance in filtered), Decimal(0))
    min_date = bucket["min_date"]
    max_date = bucket["max_date"]

    worker_totals: defaultdict[str, Decimal] = defaultdict(Decimal)
    worker_counts: defaultdict[str, int] = defaultdict(int)
    for advance in filtered:
        name = (advance.worker_name or "–ù–µ —É–∫–∞–∑–∞–Ω").strip() or "–ù–µ —É–∫–∞–∑–∞–Ω"
        worker_totals[name] += advance.amount
        worker_counts[name] += 1

    worker_summary = sorted(
        worker_totals.items(),
        key=lambda item: item[1],
        reverse=True
    )

    if min_date and max_date:
        period = f"{min_date.strftime('%d.%m.%Y')} ‚Äî {max_date.strftime('%d.%m.%Y')}"
    else:
        period = "‚Äî"

    lines = [
        f"‚öí <b>{label}</b>",
        f"üèóÔ∏è {obj.name}",
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        f"–í—Å–µ–≥–æ –≤—ã–ø–ª–∞—Ç: {total}",
        f"–í—ã–¥–∞–Ω–æ: {format_currency(total_amount)}",
        f"–ü–µ—Ä–∏–æ–¥: {period}",
        "",
        "üë• <b>–ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º:</b>",
    ]

    if worker_summary:
        for name, amount in worker_summary:
            count = worker_counts[name]
            lines.append(f"   ‚Ä¢ {name}: {format_currency(amount)} ({count} –≤—ã–ø–ª–∞—Ç)")
    else:
        lines.append("   –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")

    lines.append("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    lines.append("üìÑ –í—ã–ø–ª–∞—Ç—ã:")

    keyboard = InlineKeyboardBuilder()
    for idx, advance in enumerate(current_items, start=start + 1):
        date_str = advance.date.strftime("%d.%m.%Y")
        amount_str = format_currency(advance.amount)
        worker = advance.worker_name or "–ù–µ —É–∫–∞–∑–∞–Ω"

        lines.append(
            f"\n{idx}. üë§ {worker}\n"
            f"   üí∞ {amount_str}\n"
            f"   üìÖ {date_str}"
        )

        keyboard.row(
            InlineKeyboardButton(
                text=f"üë§ {worker[:16]} ‚Ä¢ {amount_str}",
                callback_data=f"advance:detail:{advance.id}:{object_id}:{page}:{work_type_token}"
            )
        )

    nav_buttons = _build_token_navigation("advance:worktype", object_id, page, total_pages, work_type_token)
    if nav_buttons:
        keyboard.row(*nav_buttons)

    keyboard.row(
        InlineKeyboardButton(
            text="üîô –ö –≤–∏–¥–∞–º —Ä–∞–±–æ—Ç",
            callback_data=f"object:view_advances:{object_id}"
        )
    )

    await send_new_message(
        callback,
        "\n".join(lines),
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )


EXPENSE_TYPE_TITLES = {
    ExpenseType.SUPPLIES: "–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏",
    ExpenseType.TRANSPORT: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    ExpenseType.OVERHEAD: "–ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
}


def _build_expense_detail_view(
    expense,
    user_role: UserRole,
    object_id: int,
    page: int,
    expense_token: str = DEFAULT_EXPENSE_TYPE_TOKEN,
):
    status_icon, status_text = _get_expense_status(expense)
    type_icon = EXPENSE_TYPE_ICONS.get(expense.type, "üí∞")
    type_title = EXPENSE_TYPE_TITLES.get(expense.type, "–†–∞—Å—Ö–æ–¥")

    has_receipt = bool(expense.photo_url and expense.photo_url.startswith("file_"))
    can_compensate = (
        expense.payment_source == PaymentSource.PERSONAL
        and expense.compensation_status == CompensationStatus.PENDING
    )

    lines = [
        f"{status_icon} <b>–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞</b>",
        "",
        f"–¢–∏–ø: {type_icon} {type_title}",
        f"üí∞ –°—É–º–º–∞: {format_currency(expense.amount)}",
        f"üìÖ –î–∞—Ç–∞: {expense.date.strftime('%d.%m.%Y')}",
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {expense.description}",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        f"–°—Ç–∞—Ç—É—Å: <b>{status_text}</b>",
    ]

    if has_receipt:
        lines.append("üìé –ß–µ–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω ‚Äî —Å–º. –Ω–∏–∂–µ")

    keyboard = InlineKeyboardBuilder()

    if can_compensate and user_role == UserRole.ADMIN:
        keyboard.row(
            InlineKeyboardButton(
                text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ",
                callback_data=f"expense:compensate:{expense.id}:{object_id}:{page}:{expense_token}"
            )
        )

    if user_role == UserRole.ADMIN:
        keyboard.row(
            InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=f"expense:edit:{expense.id}:{object_id}:{page}:{expense_token}"
            )
        )
        keyboard.row(
            InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"expense:delete_request:{expense.id}:{object_id}:{page}:{expense_token}"
            )
        )

    if expense_token == DEFAULT_EXPENSE_TYPE_TOKEN:
        back_callback = f"object:view_expenses:{object_id}"
    else:
        back_callback = f"expense:type:{object_id}:{page}:{expense_token}"

    keyboard.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=back_callback
        )
    )

    return "\n".join(lines), keyboard.as_markup(), has_receipt


async def _send_expense_receipt(message: Message, session: AsyncSession, expense) -> None:
    receipt_id = None
    try:
        receipt_id = int(expense.photo_url.split("_", 1)[1]) if expense.photo_url else None
    except (ValueError, IndexError):
        receipt_id = None

    if not receipt_id:
        return

    receipt_file = await get_file_by_id(session, receipt_id)
    if not receipt_file or not receipt_file.file_data:
        await message.answer("‚ö†Ô∏è –ß–µ–∫ –±—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    size_kb = (receipt_file.file_size or 0) // 1024
    caption = (
        f"üìé <b>–ß–µ–∫ –ø–æ —Ä–∞—Å—Ö–æ–¥—É</b>\n"
        f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {receipt_file.uploaded_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"üì¶ –†–∞–∑–º–µ—Ä: {size_kb} –ö–ë"
    )

    photo = BufferedInputFile(
        receipt_file.file_data,
        filename=receipt_file.filename or "receipt.jpg"
    )
    await message.answer_photo(photo=photo, caption=caption, parse_mode="HTML")


def _build_advance_detail_view(
    advance,
    user_role: UserRole,
    object_id: int,
    page: int,
    work_type_token: str = "-",
) -> tuple[str, InlineKeyboardMarkup]:
    work_type_display = _display_work_type(advance.work_type)

    lines = [
        "üíµ <b>–î–µ—Ç–∞–ª–∏ –∞–≤–∞–Ω—Å–∞</b>",
        "",
        f"üë§ –†–∞–±–æ—á–∏–π: {advance.worker_name}",
        f"‚öí –í–∏–¥ —Ä–∞–±–æ—Ç: {work_type_display}",
        f"üí∞ –°—É–º–º–∞: {format_currency(advance.amount)}",
        f"üìÖ –î–∞—Ç–∞: {advance.date.strftime('%d.%m.%Y')}",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {advance.added_by}",
    ]

    keyboard = InlineKeyboardBuilder()

    if user_role == UserRole.ADMIN:
        keyboard.row(
            InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=f"advance:edit:{advance.id}:{object_id}:{page}:{work_type_token}"
            )
        )
        keyboard.row(
            InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"advance:delete_request:{advance.id}:{object_id}:{page}:{work_type_token}"
            )
        )

    if work_type_token and work_type_token != "-":
        back_callback = f"advance:worktype:{object_id}:1:{work_type_token}"
    else:
        back_callback = f"object:view_advances:{object_id}"

    keyboard.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=back_callback
        )
    )

    return "\n".join(lines), keyboard.as_markup()


LOG_ACTION_TITLES = {
    ObjectLogType.EXPENSE_CREATED: "–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥",
    ObjectLogType.EXPENSE_UPDATED: "–ò–∑–º–µ–Ω—ë–Ω —Ä–∞—Å—Ö–æ–¥",
    ObjectLogType.EXPENSE_DELETED: "–£–¥–∞–ª—ë–Ω —Ä–∞—Å—Ö–æ–¥",
    ObjectLogType.EXPENSE_COMPENSATED: "–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–æ —Ä–∞—Å—Ö–æ–¥—É",
    ObjectLogType.ADVANCE_CREATED: "–î–æ–±–∞–≤–ª–µ–Ω –∞–≤–∞–Ω—Å",
    ObjectLogType.ADVANCE_UPDATED: "–ò–∑–º–µ–Ω—ë–Ω –∞–≤–∞–Ω—Å",
    ObjectLogType.ADVANCE_DELETED: "–£–¥–∞–ª—ë–Ω –∞–≤–∞–Ω—Å",
    ObjectLogType.OBJECT_COMPLETED: "–û–±—ä–µ–∫—Ç –∑–∞–≤–µ—Ä—à—ë–Ω",
    ObjectLogType.OBJECT_RESTORED: "–û–±—ä–µ–∫—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ —Ä–∞–±–æ—Ç—É",
}


async def _send_logs_page(
    callback: CallbackQuery,
    session: AsyncSession,
    object_id: int,
    page: int,
) -> None:
    obj = await get_object_by_id(session, object_id, load_relations=False)
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    logs, total = await get_object_logs(session, object_id, page, LOGS_PAGE_SIZE)

    if total == 0:
        await send_new_message(
            callback,
            f"üìú <b>–õ–æ–≥–∏ –æ–±—ä–µ–∫—Ç–∞</b>\n\nüèóÔ∏è {obj.name}\n\n–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"object:view:{object_id}")]]
            ),
        )
        return

    total_pages = math.ceil(total / LOGS_PAGE_SIZE)
    page = _normalize_page(page, total_pages)

    lines = [
        "üìú <b>–õ–æ–≥–∏ –æ–±—ä–µ–∫—Ç–∞</b>",
        f"üèóÔ∏è {obj.name}",
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
    ]

    for idx, log in enumerate(logs, start=1 + (page - 1) * LOGS_PAGE_SIZE):
        timestamp = log.created_at.strftime("%d.%m.%Y %H:%M")
        actor = _format_user_name(log.user)
        title = LOG_ACTION_TITLES.get(log.action, log.action.value)
        lines.append(
            f"\n{idx}. {timestamp}\n"
            f"üë§ {actor}\n"
            f"üîñ {title}\n"
            f"üìù {log.description}"
        )

    keyboard = InlineKeyboardBuilder()
    nav_buttons = _build_navigation_buttons("object:view_logs", object_id, page, total_pages)
    if nav_buttons:
        keyboard.row(*nav_buttons)

    keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"object:view:{object_id}"))

    await send_new_message(
        callback,
        "\n".join(lines),
        parse_mode="HTML",
        reply_markup=keyboard.as_markup(),
    )


@router.callback_query(F.data.in_(["objects:active", "objects:completed"]))
async def show_objects_list(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ (—Ç–µ–∫—É—â–∏—Ö –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö)
    """
    await state.clear()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ callback_data
    status = ObjectStatus.ACTIVE if callback.data == "objects:active" else ObjectStatus.COMPLETED
    status_text = "–¢–µ–∫—É—â–∏–µ" if status == ObjectStatus.ACTIVE else "–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ –ë–î
    objects = await get_objects_by_status(session, status)
    
    if not objects:
        text = f"üìã <b>{status_text} –æ–±—ä–µ–∫—Ç—ã</b>\n\n–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
    else:
        text = f"üìã <b>{status_text} –æ–±—ä–µ–∫—Ç—ã</b>\n\n–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    
    await send_new_message(
        callback,
        text,
        parse_mode="HTML",
        reply_markup=get_objects_list_keyboard(objects, status),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("object:view:"))
async def show_object_card(callback: CallbackQuery, user: User, session: AsyncSession, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –æ–±—ä–µ–∫—Ç–∞
    """
    await state.clear()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data
    object_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
    obj = await get_object_by_id(session, object_id, load_relations=True)
    
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –æ–±—ä–µ–∫—Ç–∞ (relation –ø–æ–¥–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–∏ load_relations=True)
    files = getattr(obj, "files", []) or []
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    bot_username = None
    if callback.message:
        bot_username = await get_bot_username(callback.message.bot)

    report_text = generate_object_report(obj, files, bot_username)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await send_new_message(
        callback,
        report_text,
        parse_mode="HTML",
        reply_markup=get_object_card_keyboard(object_id, obj.status, user.role),
    )
    await callback.answer()


@router.callback_query(F.data.regex(r"^object:documents:\d+$"))
async def show_object_documents(callback: CallbackQuery, session: AsyncSession):
    parts = callback.data.split(":")
    if len(parts) < 3:
        await callback.answer()
        return

    object_id = int(parts[2])
    obj = await get_object_by_id(session, object_id, load_relations=False)
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    files = await get_files_by_object(session, object_id)
    grouped = group_document_files(files)
    counts = document_counts(grouped)

    text, markup = build_documents_menu_content(object_id, obj.name, counts)

    await send_new_message(
        callback,
        text,
        parse_mode="HTML",
        reply_markup=markup,
    )
    await callback.answer()


@router.callback_query(F.data.startswith("object:documents:list:"))
async def list_object_documents(callback: CallbackQuery, session: AsyncSession):
    parts = callback.data.split(":")
    if len(parts) < 5:
        await callback.answer()
        return

    object_id = int(parts[3])
    token = parts[4]
    info = _document_info(token)
    file_type = _document_file_type(token)

    if not info or not file_type:
        await callback.answer()
        return

    obj = await get_object_by_id(session, object_id, load_relations=False)
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    files = await get_files_by_object(session, object_id, file_type=file_type)

    lines = [
        f"{info['icon']} <b>{info['label']}</b>",
        f"üèóÔ∏è {obj.name}",
        "",
    ]

    keyboard = InlineKeyboardBuilder()

    if files:
        lines.append(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        lines.append("")

        for idx, file in enumerate(files, 1):
            uploaded = file.uploaded_at.strftime("%d.%m.%Y %H:%M") if file.uploaded_at else "‚Äî"
            filename = file.filename or f"{info['label']} #{file.id}"
            size = _format_file_size(file.file_size)
            lines.append(f"{idx}. {filename}")
            lines.append(f"   üìÖ {uploaded} ‚Ä¢ üì¶ {size}")
            lines.append("")

            keyboard.row(
                InlineKeyboardButton(
                    text=f"{info['icon']} {filename}",
                    callback_data=f"object:documents:file:{file.id}:{object_id}:{token}"
                )
            )
    else:
        lines.append("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        lines.append("")

    keyboard.row(
        InlineKeyboardButton(
            text=f"‚ûï {info['icon']} –î–æ–±–∞–≤–∏—Ç—å {info['singular']}",
            callback_data=f"object:documents:add:{object_id}:{token}"
        )
    )
    keyboard.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º",
            callback_data=f"object:documents:{object_id}"
        )
    )

    await send_new_message(
        callback,
        "\n".join(lines).strip(),
        parse_mode="HTML",
        reply_markup=keyboard.as_markup(),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("object:documents:add:"))
async def add_object_document(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    parts = callback.data.split(":")
    if len(parts) < 5:
        await callback.answer()
        return

    object_id = int(parts[3])
    token = parts[4]
    info = _document_info(token)
    file_type = _document_file_type(token)

    if not info or not file_type:
        await callback.answer()
        return

    obj = await get_object_by_id(session, object_id, load_relations=False)
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.clear()
    await state.update_data(
        document_object_id=object_id,
        document_token=token,
        document_object_name=obj.name,
    )
    await state.set_state(ObjectDocumentStates.waiting_document)

    await send_new_message(
        callback,
        f"{info['icon']} <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</b>\n\n"
        f"–û–±—ä–µ–∫—Ç: <b>{obj.name}</b>\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{info['label']}</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∏–∑ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞ –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞.\n\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.",
        parse_mode="HTML",
        reply_markup=get_cancel_button(),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("object:documents:file:"))
async def send_object_document(callback: CallbackQuery, session: AsyncSession):
    parts = callback.data.split(":")
    if len(parts) < 6:
        await callback.answer()
        return

    file_id = int(parts[3])
    object_id = int(parts[4])
    token = parts[5]
    info = _document_info(token)

    file = await get_file_by_id(session, file_id)
    if not file or file.object_id != object_id:
        await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    caption = f"{info['icon'] if info else 'üìÑ'} {file.filename or '–î–æ–∫—É–º–µ–Ω—Ç'}"

    file_service = FileService(callback.message.bot)
    file_data = await file_service.get_file_data(session, file_id)

    try:
        if file_data:
            await callback.message.answer_document(
                document=BufferedInputFile(file_data, filename=file.filename or "document.pdf"),
                caption=caption,
            )
        else:
            await callback.message.answer_document(
                document=file.telegram_file_id,
                caption=caption,
            )
        await callback.answer("üìÑ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as exc:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª", show_alert=True)
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_id}: {exc}")


@router.message(ObjectDocumentStates.waiting_document, F.document)
async def process_object_document(message: Message, user: User, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    object_id = data.get("document_object_id")
    token = data.get("document_token")
    object_name = data.get("document_object_name", "‚Äî")

    info = _document_info(token) if token else None
    file_type = _document_file_type(token) if token else None

    if not object_id or not info or not file_type:
        await state.clear()
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    document = message.document
    mime = (document.mime_type or "").lower() if document.mime_type else ""
    if "pdf" not in mime:
        await message.answer("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.")
        return

    file_service = FileService(message.bot)

    saved_file = await file_service.save_document(
        session=session,
        document=document,
        object_id=object_id,
        file_type=file_type,
    )

    if not saved_file:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return

    await state.clear()

    size = _format_file_size(document.file_size)
    await message.answer(
        f"‚úÖ <b>–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω</b>\n\n"
        f"–û–±—ä–µ–∫—Ç: <b>{object_name}</b>\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{info['label']}</b>\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{document.file_name or saved_file.filename or '–ë–µ–∑ –∏–º–µ–Ω–∏'}</b>\n"
        f"–†–∞–∑–º–µ—Ä: {size}",
        parse_mode="HTML",
    )

    files = await get_files_by_object(session, object_id)
    grouped = group_document_files(files)
    counts = document_counts(grouped)
    text, markup = build_documents_menu_content(object_id, object_name, counts)

    await message.answer(text, parse_mode="HTML", reply_markup=markup)


@router.message(ObjectDocumentStates.waiting_document)
async def expect_pdf_document(message: Message):
    await message.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.")


@router.callback_query(F.data.startswith("object:complete_request:"))
async def confirm_complete_object(callback: CallbackQuery, user: User, session: AsyncSession):
    """
    –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    """
    
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    object_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç
    obj = await get_object_by_id(session, object_id, load_relations=False)
    
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await send_new_message(
        callback,
        f"‚ö†Ô∏è <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—ä–µ–∫—Ç:\n"
        f"<b>{obj.name}</b>?\n\n"
        f"–û–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª '–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã'.",
        parse_mode="HTML",
        reply_markup=get_confirm_keyboard(f"object:complete:confirm:{object_id}", "object:complete:cancel"),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("object:complete:confirm:"))
async def complete_object(callback: CallbackQuery, user: User, session: AsyncSession):
    """
    –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—ä–µ–∫—Ç
    """
    await callback.answer()  # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    
    if user.role != UserRole.ADMIN:
        await send_new_message(callback, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    object_id = int(callback.data.split(":")[3])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞
    obj = await update_object_status(session, object_id, ObjectStatus.COMPLETED)
    
    if not obj:
        await send_new_message(callback, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞")
        return
    
    await send_new_message(
        callback,
        f"‚úÖ <b>–û–±—ä–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
        f"–û–±—ä–µ–∫—Ç <b>{obj.name}</b> —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª '–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã'.",
        parse_mode="HTML",
    )

    await _log_object_action(
        session=session,
        object_id=obj.id,
        action=ObjectLogType.OBJECT_COMPLETED,
        description=f"–û–±—ä–µ–∫—Ç '{obj.name}' –∑–∞–≤–µ—Ä—à—ë–Ω",
        user_id=user.id,
    )


@router.callback_query(F.data == "object:complete:cancel")
async def cancel_complete_object(callback: CallbackQuery):
    """
    –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    """
    await send_new_message(
        callback,
        "‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
    )
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


@router.callback_query(F.data.startswith("object:restore_request:"))
async def confirm_restore_object(callback: CallbackQuery, user: User, session: AsyncSession):
    """
    –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ —Ç–µ–∫—É—â–∏–µ
    """
    
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    object_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç
    obj = await get_object_by_id(session, object_id, load_relations=False)
    
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await send_new_message(
        callback,
        f"‚ö†Ô∏è <b>–í–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞ –≤ —Ç–µ–∫—É—â–∏–µ</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç:\n"
        f"<b>{obj.name}</b>\n\n"
        f"–≤ —Ä–∞–∑–¥–µ–ª '–¢–µ–∫—É—â–∏–µ –æ–±—ä–µ–∫—Ç—ã'?",
        parse_mode="HTML",
        reply_markup=get_confirm_keyboard(f"object:restore:confirm:{object_id}", "object:restore:cancel"),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("object:restore:confirm:"))
async def restore_object(callback: CallbackQuery, user: User, session: AsyncSession):
    """
    –í–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç –≤ —Ç–µ–∫—É—â–∏–µ
    """
    
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    object_id = int(callback.data.split(":")[3])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞
    obj = await update_object_status(session, object_id, ObjectStatus.ACTIVE)
    
    if not obj:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±—ä–µ–∫—Ç–∞", show_alert=True)
        return
    
    await send_new_message(
        callback,
        f"‚úÖ <b>–û–±—ä–µ–∫—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω</b>\n\n"
        f"–û–±—ä–µ–∫—Ç <b>{obj.name}</b> —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª '–¢–µ–∫—É—â–∏–µ –æ–±—ä–µ–∫—Ç—ã'.",
        parse_mode="HTML",
    )
    await callback.answer("‚úÖ –û–±—ä–µ–∫—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω")

    await _log_object_action(
        session=session,
        object_id=obj.id,
        action=ObjectLogType.OBJECT_RESTORED,
        description=f"–û–±—ä–µ–∫—Ç '{obj.name}' –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ —Ä–∞–±–æ—Ç—É",
        user_id=user.id,
    )


@router.callback_query(F.data == "object:restore:cancel")
async def cancel_restore_object(callback: CallbackQuery):
    """
    –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞
    """
    await send_new_message(
        callback,
        "‚ùå –í–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω.",
    )
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


@router.callback_query(F.data.startswith("object:view_advances:"))
async def view_advances_list(callback: CallbackQuery, user: User, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∞–≤–∞–Ω—Å–æ–≤ –ø–æ –æ–±—ä–µ–∫—Ç—É"""

    parts = callback.data.split(":")
    object_id = int(parts[2])

    await _send_advances_overview(callback, session, object_id)
    await callback.answer()


@router.callback_query(F.data.startswith("object:view_expenses:"))
async def view_expenses_list(callback: CallbackQuery, user: User, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ–±—ä–µ–∫—Ç–∞"""
    parts = callback.data.split(":")
    object_id = int(parts[2])
    expense_token = parts[3] if len(parts) > 3 else DEFAULT_EXPENSE_TYPE_TOKEN

    await _send_expenses_overview(callback, session, object_id)
    await callback.answer()


@router.callback_query(F.data.startswith("expense:type:"))
async def view_expenses_by_type(callback: CallbackQuery, user: User, session: AsyncSession):
    parts = callback.data.split(":")
    object_id = int(parts[2])
    page = int(parts[3]) if len(parts) > 3 else 1
    expense_token = parts[4] if len(parts) > 4 else DEFAULT_EXPENSE_TYPE_TOKEN

    await _send_expenses_type_page(callback, session, object_id, expense_token, page)
    await callback.answer()


@router.callback_query(F.data.startswith("object:view_logs:"))
async def view_object_logs(callback: CallbackQuery, user: User, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –æ–±—ä–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""

    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    parts = callback.data.split(":")
    object_id = int(parts[2])
    page = int(parts[3]) if len(parts) > 3 else 1

    await _send_logs_page(callback, session, object_id, page)
    await callback.answer()


@router.callback_query(F.data.startswith("advance:worktype:"))
async def view_advances_by_worktype(callback: CallbackQuery, user: User, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤–∞–Ω—Å–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≤–∏–¥—É —Ä–∞–±–æ—Ç"""
    parts = callback.data.split(":")
    object_id = int(parts[2])
    page = int(parts[3]) if len(parts) > 3 else 1
    work_type_token = parts[4] if len(parts) > 4 else DEFAULT_WORK_TYPE_TOKEN

    await _send_advances_worktype_page(callback, session, object_id, work_type_token, page)
    await callback.answer()


@router.callback_query(F.data.startswith("expense:detail:"))
async def view_expense_detail(callback: CallbackQuery, user: User, session: AsyncSession):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–∞"""
    parts = callback.data.split(":")
    expense_id = int(parts[2])
    object_id = int(parts[3]) if len(parts) > 3 else None
    page = int(parts[4]) if len(parts) > 4 else 1
    expense_token = parts[5] if len(parts) > 5 else DEFAULT_EXPENSE_TYPE_TOKEN

    expense = await get_expense_by_id(session, expense_id)
    if not expense:
        await callback.answer("‚ùå –†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    object_id = object_id or expense.object_id

    text, reply_markup, has_receipt = _build_expense_detail_view(expense, user.role, object_id, page, expense_token)

    await send_new_message(
        callback,
        text,
        parse_mode="HTML",
        reply_markup=reply_markup,
    )

    if has_receipt:
        await _send_expense_receipt(callback.message, session, expense)

    await callback.answer()


@router.callback_query(F.data.startswith("expense:compensate:"))
async def compensate_expense(callback: CallbackQuery, user: User, session: AsyncSession):
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    parts = callback.data.split(":")
    expense_id = int(parts[2])
    object_id = int(parts[3]) if len(parts) > 3 else 0
    page = int(parts[4]) if len(parts) > 4 else 1
    expense_token = parts[5] if len(parts) > 5 else DEFAULT_EXPENSE_TYPE_TOKEN

    expense = await update_compensation_status(session, expense_id, CompensationStatus.COMPENSATED)

    if not expense:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
        return

    await _log_object_action(
        session=session,
        object_id=expense.object_id,
        action=ObjectLogType.EXPENSE_COMPENSATED,
        description=f"–†–∞—Å—Ö–æ–¥ #{expense.id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
        user_id=user.id,
    )

    text, reply_markup, has_receipt = _build_expense_detail_view(expense, user.role, object_id or expense.object_id, page, expense_token)

    await send_new_message(
        callback,
        text,
        parse_mode="HTML",
        reply_markup=reply_markup,
    )

    if has_receipt:
        await _send_expense_receipt(callback.message, session, expense)

    await callback.answer("‚úÖ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –æ—Ç–º–µ—á–µ–Ω–∞!", show_alert=True)


@router.callback_query(F.data.startswith("expense:edit:"))
async def start_expense_edit(callback: CallbackQuery, user: User, session: AsyncSession, state: FSMContext):
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    parts = callback.data.split(":")
    expense_id = int(parts[2])
    object_id = int(parts[3]) if len(parts) > 3 else None
    page = int(parts[4]) if len(parts) > 4 else 1
    expense_token = parts[5] if len(parts) > 5 else DEFAULT_EXPENSE_TYPE_TOKEN

    expense = await get_expense_by_id(session, expense_id)
    if not expense:
        await callback.answer("‚ùå –†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    object_id = object_id or expense.object_id

    await state.set_state(EditExpenseStates.choose_field)
    await state.update_data(
        expense_id=expense_id,
        object_id=object_id,
        page=page,
        expense_token=expense_token,
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üí∞ –°—É–º–º–∞", callback_data="expense:edit_field:amount"))
    keyboard.row(InlineKeyboardButton(text="üìÖ –î–∞—Ç–∞", callback_data="expense:edit_field:date"))
    keyboard.row(InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="expense:edit_field:description"))
    keyboard.row(InlineKeyboardButton(text="üí≥ –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–ø–ª–∞—Ç—ã", callback_data="expense:edit_field:payment_source"))
    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="expense:edit_cancel"))

    await send_new_message(
        callback,
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode="HTML",
        reply_markup=keyboard.as_markup(),
    )
    await callback.answer()


@router.callback_query(EditExpenseStates.choose_field, F.data.startswith("expense:edit_field:"))
async def choose_expense_field(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split(":")
    field = parts[2]

    await state.update_data(field=field)

    if field == "payment_source":
        await state.set_state(EditExpenseStates.choose_payment_source)
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—á–µ–Ω–æ —Ñ–∏—Ä–º–æ–π", callback_data="expense:edit_payment_source:company"))
        keyboard.row(InlineKeyboardButton(text="üí∞ –û–ø–ª–∞—á–µ–Ω–æ –ø—Ä–æ—Ä–∞–±–æ–º", callback_data="expense:edit_payment_source:personal"))
        keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="expense:edit_cancel"))

        await send_new_message(
            callback,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –æ–ø–ª–∞—Ç—ã:",
            reply_markup=keyboard.as_markup(),
        )
        await callback.answer()
        return
    
    await state.set_state(EditExpenseStates.waiting_value)

    prompts = {
        "amount": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12500)",
        "date": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>",
        "description": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)",
    }

    await send_new_message(
        callback,
        prompts.get(field, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"),
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="expense:edit_cancel")]
        ]),
    )
    await callback.answer()


@router.message(EditExpenseStates.waiting_value)
async def apply_expense_edit(message: Message, session: AsyncSession, state: FSMContext, user: User):
    data = await state.get_data()
    expense_id = data.get("expense_id")
    object_id = data.get("object_id")
    page = data.get("page", 1)
    field = data.get("field")
    expense_token = data.get("expense_token", DEFAULT_EXPENSE_TYPE_TOKEN)

    if user.role != UserRole.ADMIN or not expense_id or not field:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    value = message.text.strip()
    updates = {}

    if field == "amount":
        try:
            updates["amount"] = Decimal(value.replace(" ", "").replace(",", "."))
        except (InvalidOperation, AttributeError):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü—Ä–∏–º–µ—Ä: 12500")
            return
    elif field == "date":
        parsed_date = None
        for fmt in ("%d.%m.%Y", "%Y-%m-%d"):
            try:
                parsed_date = datetime.strptime(value, fmt)
                break
            except ValueError:
                continue
        if not parsed_date:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return
        updates["date"] = parsed_date
    elif field == "description":
        if len(value) < 3:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
            return
        updates["description"] = value
    else:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ –ø–æ–ª–µ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º.")
        await state.clear()
        return

    expense = await update_expense(session, expense_id, **updates)
    if not expense:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    await state.clear()

    text, reply_markup, has_receipt = _build_expense_detail_view(expense, user.role, object_id, page, expense_token)
    await message.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await message.answer(text, parse_mode="HTML", reply_markup=reply_markup)

    if has_receipt:
        await _send_expense_receipt(message, session, expense)

    field_labels = {
        "amount": "–°—É–º–º–∞",
        "date": "–î–∞—Ç–∞",
        "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
    }

    if field == "amount":
        new_value = format_currency(expense.amount)
    elif field == "date":
        new_value = expense.date.strftime("%d.%m.%Y") if expense.date else "‚Äî"
    elif field == "description":
        new_value = expense.description
    else:
        new_value = value

    await _log_object_action(
        session=session,
        object_id=expense.object_id,
        action=ObjectLogType.EXPENSE_UPDATED,
        description=(
            f"–û–±–Ω–æ–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥ #{expense.id}: {field_labels.get(field, field)} ‚Üí {new_value}"
        ),
        user_id=user.id,
    )


@router.callback_query(EditExpenseStates.choose_payment_source, F.data.startswith("expense:edit_payment_source:"))
async def apply_expense_payment_source(callback: CallbackQuery, session: AsyncSession, state: FSMContext, user: User):
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    parts = callback.data.split(":")
    new_value = parts[2]

    data = await state.get_data()
    expense_id = data.get("expense_id")
    object_id = data.get("object_id")
    page = data.get("page", 1)
    expense_token = data.get("expense_token", DEFAULT_EXPENSE_TYPE_TOKEN)

    expense = await get_expense_by_id(session, expense_id)
    if not expense:
        await state.clear()
        await callback.answer("‚ùå –†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    updates = {}
    if new_value == "company":
        updates["payment_source"] = PaymentSource.COMPANY
        updates["compensation_status"] = None
    else:
        compensation_status = expense.compensation_status or CompensationStatus.PENDING
        updates["payment_source"] = PaymentSource.PERSONAL
        updates["compensation_status"] = compensation_status

    expense = await update_expense(session, expense_id, **updates)
    await state.clear()

    await callback.answer("‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª—ë–Ω", show_alert=True)

    text, reply_markup, has_receipt = _build_expense_detail_view(expense, user.role, object_id, page, expense_token)
    await send_new_message(
        callback,
        text,
        parse_mode="HTML",
        reply_markup=reply_markup,
    )

    if has_receipt:
        await _send_expense_receipt(callback.message, session, expense)

    source_text = "–û–ø–ª–∞—á–µ–Ω–æ —Ñ–∏—Ä–º–æ–π" if updates["payment_source"] == PaymentSource.COMPANY else "–û–ø–ª–∞—á–µ–Ω–æ –ø—Ä–æ—Ä–∞–±–æ–º"

    await _log_object_action(
        session=session,
        object_id=expense.object_id,
        action=ObjectLogType.EXPENSE_UPDATED,
        description=f"–ò—Å—Ç–æ—á–Ω–∏–∫—É –æ–ø–ª–∞—Ç—ã —Ä–∞—Å—Ö–æ–¥–∞ #{expense.id} –ø—Ä–∏—Å–≤–æ–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: {source_text}",
        user_id=user.id,
    )


@router.callback_query(F.data == "expense:edit_cancel")
async def cancel_expense_edit(callback: CallbackQuery, session: AsyncSession, state: FSMContext, user: User):
    data = await state.get_data()
    await state.clear()

    expense_id = data.get("expense_id")
    object_id = data.get("object_id")
    page = data.get("page", 1)
    expense_token = data.get("expense_token", DEFAULT_EXPENSE_TYPE_TOKEN)

    if not expense_id:
        await callback.answer("‚ùå –û—Ç–º–µ–Ω–∞", show_alert=True)
        return

    expense = await get_expense_by_id(session, expense_id)
    if not expense:
        await callback.answer("‚ùå –†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    object_id = object_id or expense.object_id

    text, reply_markup, has_receipt = _build_expense_detail_view(expense, user.role, object_id, page, expense_token)
    await send_new_message(
        callback,
        text,
        parse_mode="HTML",
        reply_markup=reply_markup,
    )

    if has_receipt:
        await _send_expense_receipt(callback.message, session, expense)

    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


@router.callback_query(F.data.startswith("expense:delete_request:"))
async def request_expense_delete(callback: CallbackQuery, user: User, session: AsyncSession):
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    parts = callback.data.split(":")
    expense_id = int(parts[2])
    object_id = int(parts[3]) if len(parts) > 3 else None
    page = int(parts[4]) if len(parts) > 4 else 1
    expense_token = parts[5] if len(parts) > 5 else DEFAULT_EXPENSE_TYPE_TOKEN

    expense = await get_expense_by_id(session, expense_id)
    if not expense:
        await callback.answer("‚ùå –†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    object_id = object_id or expense.object_id

    await send_new_message(
        callback,
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞—Å—Ö–æ–¥?",
        reply_markup=get_confirm_keyboard(
            f"expense:delete_confirm:{expense_id}:{object_id}:{page}:{expense_token}",
            f"expense:detail:{expense_id}:{object_id}:{page}:{expense_token}"
        ),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("expense:delete_confirm:"))
async def confirm_expense_delete(callback: CallbackQuery, user: User, session: AsyncSession, state: FSMContext):
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    parts = callback.data.split(":")
    expense_id = int(parts[2])
    object_id = int(parts[3]) if len(parts) > 3 else 0
    page = int(parts[4]) if len(parts) > 4 else 1
    expense_token = parts[5] if len(parts) > 5 else DEFAULT_EXPENSE_TYPE_TOKEN

    expense = await get_expense_by_id(session, expense_id)
    if not expense:
        await callback.answer("‚ùå –†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    object_id = object_id or expense.object_id

    success = await delete_expense(session, expense_id)
    if not success:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", show_alert=True)
        return

    await state.clear()
    await callback.answer("üóë –†–∞—Å—Ö–æ–¥ —É–¥–∞–ª—ë–Ω", show_alert=True)

    if expense_token == DEFAULT_EXPENSE_TYPE_TOKEN:
        await _send_expenses_overview(callback, session, object_id)
    else:
        await _send_expenses_type_page(callback, session, object_id, expense_token, page)

    await _log_object_action(
        session=session,
        object_id=expense.object_id,
        action=ObjectLogType.EXPENSE_DELETED,
        description=(
            f"–£–¥–∞–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥ #{expense.id}: {_expense_type_label(expense.type)} ‚Äî "
            f"{format_currency(expense.amount)}"
        ),
        user_id=user.id,
    )


@router.callback_query(F.data.startswith("advance:detail:"))
async def view_advance_detail(callback: CallbackQuery, user: User, session: AsyncSession):
    parts = callback.data.split(":")
    advance_id = int(parts[2])
    object_id = int(parts[3]) if len(parts) > 3 else None
    page = int(parts[4]) if len(parts) > 4 else 1
    work_type_token = parts[5] if len(parts) > 5 else DEFAULT_WORK_TYPE_TOKEN

    advance = await get_advance_by_id(session, advance_id)
    if not advance:
        await callback.answer("‚ùå –ê–≤–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    object_id = object_id or advance.object_id

    text, reply_markup = _build_advance_detail_view(advance, user.role, object_id, page, work_type_token)
    await send_new_message(
        callback,
        text,
        parse_mode="HTML",
        reply_markup=reply_markup,
    )
    await callback.answer()


@router.callback_query(F.data.startswith("advance:edit:"))
async def start_advance_edit(callback: CallbackQuery, user: User, session: AsyncSession, state: FSMContext):
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    parts = callback.data.split(":")
    advance_id = int(parts[2])
    object_id = int(parts[3]) if len(parts) > 3 else None
    page = int(parts[4]) if len(parts) > 4 else 1
    work_type_token = parts[5] if len(parts) > 5 else DEFAULT_WORK_TYPE_TOKEN

    advance = await get_advance_by_id(session, advance_id)
    if not advance:
        await callback.answer("‚ùå –ê–≤–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    object_id = object_id or advance.object_id

    await state.set_state(EditAdvanceStates.choose_field)
    await state.update_data(
        advance_id=advance_id,
        object_id=object_id,
        page=page,
        work_token=work_type_token,
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üë§ –†–∞–±–æ—á–∏–π", callback_data="advance:edit_field:worker_name"))
    keyboard.row(InlineKeyboardButton(text="‚öí –í–∏–¥ —Ä–∞–±–æ—Ç", callback_data="advance:edit_field:work_type"))
    keyboard.row(InlineKeyboardButton(text="üí∞ –°—É–º–º–∞", callback_data="advance:edit_field:amount"))
    keyboard.row(InlineKeyboardButton(text="üìÖ –î–∞—Ç–∞", callback_data="advance:edit_field:date"))
    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="advance:edit_cancel"))

    await send_new_message(
        callback,
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤–∞–Ω—Å–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=keyboard.as_markup(),
    )
    await callback.answer()


@router.callback_query(EditAdvanceStates.choose_field, F.data.startswith("advance:edit_field:"))
async def choose_advance_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split(":")[2]
    await state.update_data(field=field)
    await state.set_state(EditAdvanceStates.waiting_value)

    prompts = {
        "worker_name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Ä–∞–±–æ—á–µ–≥–æ",
        "work_type": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–∏–¥ —Ä–∞–±–æ—Ç",
        "amount": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8000)",
        "date": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>",
    }

    await send_new_message(
        callback,
        prompts.get(field, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"),
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="advance:edit_cancel")]
        ]),
    )
    await callback.answer()


@router.message(EditAdvanceStates.waiting_value)
async def apply_advance_edit(message: Message, session: AsyncSession, state: FSMContext, user: User):
    if user.role != UserRole.ADMIN:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        await state.clear()
        return

    data = await state.get_data()
    advance_id = data.get("advance_id")
    object_id = data.get("object_id")
    page = data.get("page", 1)
    field = data.get("field")
    work_token = data.get("work_token", DEFAULT_WORK_TYPE_TOKEN)

    if not advance_id or not field:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    value = message.text.strip()
    updates = {}

    if field == "amount":
        try:
            updates["amount"] = Decimal(value.replace(" ", "").replace(",", "."))
        except (InvalidOperation, AttributeError):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü—Ä–∏–º–µ—Ä: 8000")
            return
    elif field == "date":
        parsed_date = None
        for fmt in ("%d.%m.%Y", "%Y-%m-%d"):
            try:
                parsed_date = datetime.strptime(value, fmt)
                break
            except ValueError:
                continue
        if not parsed_date:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return
        updates["date"] = parsed_date
    elif field in {"worker_name", "work_type"}:
        if len(value) < 2:
            await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
            return
        updates[field] = value
    else:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ –ø–æ–ª–µ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å")
        await state.clear()
        return

    advance = await update_advance(session, advance_id, **updates)
    if not advance:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞–Ω—Å")
        await state.clear()
        return

    await state.clear()

    new_token = _make_work_type_token(advance.work_type)
    text, reply_markup = _build_advance_detail_view(advance, user.role, object_id, page, new_token)
    await message.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await message.answer(text, parse_mode="HTML", reply_markup=reply_markup)

    field_labels = {
        "worker_name": "–†–∞–±–æ—á–∏–π",
        "work_type": "–í–∏–¥ —Ä–∞–±–æ—Ç",
        "amount": "–°—É–º–º–∞",
        "date": "–î–∞—Ç–∞",
    }

    if field == "amount":
        new_value = format_currency(advance.amount)
    elif field == "date":
        new_value = advance.date.strftime("%d.%m.%Y") if advance.date else "‚Äî"
    elif field == "worker_name":
        new_value = advance.worker_name
    elif field == "work_type":
        new_value = _display_work_type(advance.work_type)
    else:
        new_value = value

    await _log_object_action(
        session=session,
        object_id=advance.object_id,
        action=ObjectLogType.ADVANCE_UPDATED,
        description=(
            f"–û–±–Ω–æ–≤–ª–µ–Ω –∞–≤–∞–Ω—Å #{advance.id}: {field_labels.get(field, field)} ‚Üí {new_value}"
        ),
        user_id=user.id,
    )


@router.callback_query(F.data == "advance:edit_cancel")
async def cancel_advance_edit(callback: CallbackQuery, session: AsyncSession, state: FSMContext, user: User):
    data = await state.get_data()
    await state.clear()

    advance_id = data.get("advance_id")
    object_id = data.get("object_id")
    page = data.get("page", 1)
    work_token = data.get("work_token", DEFAULT_WORK_TYPE_TOKEN)

    if not advance_id:
        await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        return

    advance = await get_advance_by_id(session, advance_id)
    if not advance:
        await callback.answer("‚ùå –ê–≤–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    object_id = object_id or advance.object_id

    text, reply_markup = _build_advance_detail_view(advance, user.role, object_id, page, work_token)
    await send_new_message(
        callback,
        text,
        parse_mode="HTML",
        reply_markup=reply_markup,
    )
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


@router.callback_query(F.data.startswith("advance:delete_request:"))
async def request_advance_delete(callback: CallbackQuery, user: User, session: AsyncSession):
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    parts = callback.data.split(":")
    advance_id = int(parts[2])
    object_id = int(parts[3]) if len(parts) > 3 else 0
    page = int(parts[4]) if len(parts) > 4 else 1
    work_token = parts[5] if len(parts) > 5 else DEFAULT_WORK_TYPE_TOKEN

    advance = await get_advance_by_id(session, advance_id)
    if not advance:
        await callback.answer("‚ùå –ê–≤–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    object_id = object_id or advance.object_id

    await send_new_message(
        callback,
        "‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–≤–∞–Ω—Å?",
        reply_markup=get_confirm_keyboard(
            f"advance:delete_confirm:{advance_id}:{object_id}:{page}:{work_token}",
            f"advance:detail:{advance_id}:{object_id}:{page}:{work_token}"
        ),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("advance:delete_confirm:"))
async def confirm_advance_delete(callback: CallbackQuery, user: User, session: AsyncSession, state: FSMContext):
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    parts = callback.data.split(":")
    advance_id = int(parts[2])
    object_id = int(parts[3]) if len(parts) > 3 else 0
    page = int(parts[4]) if len(parts) > 4 else 1
    work_token = parts[5] if len(parts) > 5 else DEFAULT_WORK_TYPE_TOKEN

    advance = await get_advance_by_id(session, advance_id)
    if not advance:
        await callback.answer("‚ùå –ê–≤–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    object_id = object_id or advance.object_id

    success = await delete_advance(session, advance_id)
    if not success:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤–∞–Ω—Å", show_alert=True)
        return

    await state.clear()
    await callback.answer("üóë –ê–≤–∞–Ω—Å —É–¥–∞–ª—ë–Ω", show_alert=True)

    if _is_default_work_type_token(work_token):
        await _send_advances_overview(callback, session, object_id)
    else:
        await _send_advances_worktype_page(callback, session, object_id, work_token, page)

    await _log_object_action(
        session=session,
        object_id=advance.object_id,
        action=ObjectLogType.ADVANCE_DELETED,
        description=(
            f"–£–¥–∞–ª–µ–Ω –∞–≤–∞–Ω—Å #{advance.id}: {_display_work_type(advance.work_type)} ‚Äî "
            f"{format_currency(advance.amount)} –¥–ª—è {advance.worker_name}"
        ),
        user_id=user.id,
    )


@router.callback_query(F.data.startswith("object:delete_request:"))
async def request_delete_object(callback: CallbackQuery, user: User, session: AsyncSession):
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    object_id = int(callback.data.split(":")[2])
    obj = await get_object_by_id(session, object_id, load_relations=False)

    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await send_new_message(
        callback,
        "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç <b>{obj.name}</b>.\n"
        "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Ä–∞—Å—Ö–æ–¥—ã, –∞–≤–∞–Ω—Å—ã, —Ñ–∞–π–ª—ã –∏ –ª–æ–≥–∏.\n\n"
        "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã.",
        parse_mode="HTML",
        reply_markup=get_confirm_keyboard(f"object:delete_confirm:{object_id}", f"object:view:{object_id}"),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("object:delete_confirm:"))
async def confirm_delete_object(callback: CallbackQuery, user: User, session: AsyncSession):
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    parts = callback.data.split(":")
    if len(parts) < 3:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    object_id = int(parts[2])

    success = await delete_object(session, object_id)
    if not success:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç", show_alert=True)
        return

    objects = await get_objects_by_status(session, ObjectStatus.COMPLETED)
    if objects:
        text = (
            "üóë <b>–û–±—ä–µ–∫—Ç —É–¥–∞–ª—ë–Ω</b>\n\n"
            "–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö:"
        )
    else:
        text = "üóë <b>–û–±—ä–µ–∫—Ç —É–¥–∞–ª—ë–Ω</b>\n\n–í —Å–ø–∏—Å–∫–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."

    await send_new_message(
        callback,
        text,
        parse_mode="HTML",
        reply_markup=get_objects_list_keyboard(objects, ObjectStatus.COMPLETED),
    )
    await callback.answer("üóë –£–¥–∞–ª–µ–Ω–æ")


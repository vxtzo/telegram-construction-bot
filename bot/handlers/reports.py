"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
"""
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import User, UserRole, ObjectStatus
from database.crud import (
    get_objects_by_status,
    get_object_by_id,
    get_files_by_object,
    get_objects_by_period,
    get_company_expenses_for_period
)
from bot.keyboards.reports_kb import (
    get_period_selection,
    get_completed_objects_list
)
from bot.states.expense_states import ReportPeriodStates
from bot.services.report_generator import (
    generate_object_report,
    generate_period_report
)
from bot.utils.messaging import delete_message, send_new_message
from bot.keyboards.main_menu import get_cancel_button

router = Router()


@router.callback_query(F.data == "report:object")
async def select_object_for_report(callback: CallbackQuery, user: User, session: AsyncSession, state: FSMContext):
    """–í—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    objects = await get_objects_by_status(session, ObjectStatus.COMPLETED)
    
    await send_new_message(
        callback,
        "üìÑ <b>–û—Ç—á—ë—Ç –∑–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:",
        parse_mode="HTML",
        reply_markup=get_completed_objects_list(objects),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("report:generate:"))
async def generate_object_report_callback(callback: CallbackQuery, user: User, session: AsyncSession):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ–±—ä–µ–∫—Ç—É"""
    
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    object_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
    obj = await get_object_by_id(session, object_id, load_relations=True)
    
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã
    files = await get_files_by_object(session, object_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = generate_object_report(obj, files)
    
    await delete_message(callback.message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç (–µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω—ã–π, –º–æ–∂–µ–º —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π)
    if len(report) > 4096:
        # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è 4096 —Å–∏–º–≤–æ–ª–∞–º–∏
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        parts = [report[i:i+4000] for i in range(0, len(report), 4000)]
        for part in parts:
            await callback.message.answer(part, parse_mode="HTML")
    else:
        await callback.message.answer(report, parse_mode="HTML")
    
    await callback.answer("‚úÖ –û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")


@router.callback_query(F.data == "report:period")
async def select_report_period(callback: CallbackQuery, user: User, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    await state.clear()
    
    await send_new_message(
        callback,
        "üìÖ <b>–û—Ç—á—ë—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        parse_mode="HTML",
        reply_markup=get_period_selection(),
    )
    await callback.answer()


@router.callback_query(F.data == "report:period:year")
async def report_period_year(callback: CallbackQuery, user: User, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –≥–æ–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    await state.set_state(ReportPeriodStates.waiting_year)
    
    current_year = datetime.now().year
    
    await send_new_message(
        callback,
        f"üìÖ <b>–û—Ç—á—ë—Ç –∑–∞ –≥–æ–¥</b>\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, {current_year}):",
        parse_mode="HTML",
        reply_markup=get_cancel_button(),
    )
    await callback.answer()


@router.message(ReportPeriodStates.waiting_year)
async def process_year(message: Message, user: User, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    
    try:
        year = int(message.text.strip())
        if year < 2000 or year > 2100:
            raise ValueError
    except:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025):"
        )
        return
    
    await state.clear()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
    start_date = datetime(year, 1, 1)
    end_date = datetime(year, 12, 31, 23, 59, 59)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    objects = await get_objects_by_period(session, start_date, end_date)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    company_totals = await get_company_expenses_for_period(session, start_date, end_date)

    report = generate_period_report(objects, f"{year} –≥–æ–¥", company_totals)
    
    await message.answer(report, parse_mode="HTML")


@router.callback_query(F.data == "report:period:month")
async def report_period_month(callback: CallbackQuery, user: User, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    await state.set_state(ReportPeriodStates.waiting_month)
    
    current_date = datetime.now()
    
    await send_new_message(
        callback,
        f"üìÖ <b>–û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ú–ú.–ì–ì–ì–ì</code>\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>{current_date.strftime('%m.%Y')}</code>",
        parse_mode="HTML",
        reply_markup=get_cancel_button(),
    )
    await callback.answer()


@router.message(ReportPeriodStates.waiting_month)
async def process_month(message: Message, user: User, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—è—Ü–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    
    try:
        date_obj = datetime.strptime(message.text.strip(), "%m.%Y")
    except:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ú–ú.–ì–ì–ì–ì</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10.2025):",
            parse_mode="HTML"
        )
        return
    
    await state.clear()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ (–≤–µ—Å—å –º–µ—Å—è—Ü)
    start_date = date_obj.replace(day=1, hour=0, minute=0, second=0)
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    if date_obj.month == 12:
        end_date = date_obj.replace(year=date_obj.year + 1, month=1, day=1) - timedelta(seconds=1)
    else:
        end_date = date_obj.replace(month=date_obj.month + 1, day=1) - timedelta(seconds=1)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    objects = await get_objects_by_period(session, start_date, end_date)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    month_names = [
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]
    month_name = month_names[date_obj.month - 1]
    
    company_totals = await get_company_expenses_for_period(session, start_date, end_date)

    report = generate_period_report(objects, f"{month_name} {date_obj.year}", company_totals)
    
    await message.answer(report, parse_mode="HTML")


@router.callback_query(F.data == "report:period:range")
async def report_period_range(callback: CallbackQuery, user: User, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    
    if user.role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    await state.set_state(ReportPeriodStates.waiting_date_from)
    
    await send_new_message(
        callback,
        f"üìÖ <b>–û—Ç—á—ë—Ç –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>01.10.2025</code>",
        parse_mode="HTML",
        reply_markup=get_cancel_button(),
    )
    await callback.answer()


@router.message(ReportPeriodStates.waiting_date_from)
async def process_date_from(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞"""
    
    try:
        date_from = datetime.strptime(message.text.strip(), "%d.%m.%Y")
    except:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>:",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(date_from=date_from)
    await state.set_state(ReportPeriodStates.waiting_date_to)
    
    await message.answer(
        f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {date_from.strftime('%d.%m.%Y')}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>:",
        parse_mode="HTML",
        reply_markup=get_cancel_button()
    )


@router.message(ReportPeriodStates.waiting_date_to)
async def process_date_to(message: Message, user: User, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    
    try:
        date_to = datetime.strptime(message.text.strip(), "%d.%m.%Y")
        date_to = date_to.replace(hour=23, minute=59, second=59)  # –î–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
    except:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>:",
            parse_mode="HTML"
        )
        return
    
    data = await state.get_data()
    date_from = data['date_from']
    
    if date_to < date_from:
        await message.answer(
            "‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    objects = await get_objects_by_period(session, date_from, date_to)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    period_str = f"{date_from.strftime('%d.%m.%Y')} ‚Äî {date_to.strftime('%d.%m.%Y')}"
    company_totals = await get_company_expenses_for_period(session, date_from, date_to)

    report = generate_period_report(objects, period_str, company_totals)
    
    await message.answer(report, parse_mode="HTML")



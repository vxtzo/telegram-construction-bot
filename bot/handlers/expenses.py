"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∞–≤–∞–Ω—Å–æ–≤
"""
import os
import tempfile
from datetime import datetime
from decimal import Decimal
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import User, ExpenseType, FileType, PaymentSource, CompensationStatus
from database.crud import (
    create_expense,
    create_advance,
    get_object_by_id,
    create_file,
    update_compensation_status,
    get_expense_by_id
)
from bot.states.expense_states import AddExpenseStates, AddAdvanceStates
from bot.keyboards.main_menu import get_cancel_button, get_confirm_keyboard
from bot.services.ai_parser import (
    parse_expense_text,
    parse_advance_text,
    parse_voice_expense,
    parse_voice_advance
)
from bot.services.calculations import format_currency

router = Router()


# ============ –†–ê–°–•–û–î–´ ============

@router.callback_query(F.data.startswith("expense:add:"))
async def start_add_expense(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
    
    Format: expense:add:<type>:<object_id>
    """
    
    parts = callback.data.split(":")
    expense_type = parts[2]  # supplies, transport, overhead
    object_id = int(parts[3])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–∫—Ç
    obj = await get_object_by_id(session, object_id, load_relations=False)
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞—Å—Ö–æ–¥–∞
    type_names = {
        "supplies": "—Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤",
        "transport": "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤",
        "overhead": "–Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"
    }
    type_emoji = {
        "supplies": "üß∞",
        "transport": "üöö",
        "overhead": "üßæ"
    }
    
    type_name = type_names.get(expense_type, "—Ä–∞—Å—Ö–æ–¥–æ–≤")
    emoji = type_emoji.get(expense_type, "üí∞")
    
    await state.update_data(
        expense_type=expense_type,
        object_id=object_id,
        object_name=obj.name
    )
    await state.set_state(AddExpenseStates.waiting_input)
    
    await callback.message.edit_text(
        f"{emoji} <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {type_name}</b>\n\n"
        f"–û–±—ä–µ–∫—Ç: <b>{obj.name}</b>\n\n"
        f"–û–ø–∏—à–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º):\n\n"
        f"–ü—Ä–∏–º–µ—Ä—ã:\n"
        f"‚Ä¢ \"–ö—É–ø–∏–ª —Ü–µ–º–µ–Ω—Ç –Ω–∞ 5000 —Ä—É–±–ª–µ–π 25 –æ–∫—Ç—è–±—Ä—è\"\n"
        f"‚Ä¢ \"–î–æ—Å—Ç–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ 3500—Ä\"\n"
        f"‚Ä¢ \"–í—á–µ—Ä–∞ –ø–æ—Ç—Ä–∞—Ç–∏–ª 2000 –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\"\n\n"
        f"–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—é –¥–∞—Ç—É, —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ.",
        parse_mode="HTML",
        reply_markup=get_cancel_button()
    )
    await callback.answer()


@router.message(AddExpenseStates.waiting_input, F.text)
async def process_expense_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–∞—Å—Ö–æ–¥–∞"""
    
    data = await state.get_data()
    expense_type = data['expense_type']
    
    # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ AI
    await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    type_names = {
        "supplies": "—Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏",
        "transport": "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        "overhead": "–Ω–∞–∫–ª–∞–¥–Ω—ã–µ"
    }
    
    parsed = await parse_expense_text(message.text, type_names.get(expense_type, "—Ä–∞—Å—Ö–æ–¥"))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(
        parsed_date=parsed['date'],
        parsed_amount=parsed['amount'],
        parsed_description=parsed['description'],
        parsed_payment_source=parsed.get('payment_source', 'company')
    )
    await state.set_state(AddExpenseStates.confirm_expense)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
    date_obj = datetime.strptime(parsed['date'], "%Y-%m-%d")
    
    confirm_text = f"""
‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>

üìÖ –î–∞—Ç–∞: {date_obj.strftime("%d.%m.%Y")}
üí∞ –°—É–º–º–∞: {format_currency(parsed['amount'])}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {parsed['description']}

–í—Å–µ –≤–µ—Ä–Ω–æ?
"""
    
    await message.answer(
        confirm_text.strip(),
        parse_mode="HTML",
        reply_markup=get_confirm_keyboard("expense:confirm", "expense:retry")
    )


@router.message(AddExpenseStates.waiting_input, F.voice)
async def process_expense_voice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–∞—Å—Ö–æ–¥–∞"""
    
    data = await state.get_data()
    expense_type = data['expense_type']
    
    await message.answer("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å...")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        voice = message.voice
        file = await message.bot.get_file(voice.file_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as tmp_file:
            tmp_path = tmp_file.name
            await message.bot.download_file(file.file_path, tmp_path)
        
        # –ü–∞—Ä—Å–∏–º –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ AI
        type_names = {
            "supplies": "—Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏",
            "transport": "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
            "overhead": "–Ω–∞–∫–ª–∞–¥–Ω—ã–µ"
        }
        
        parsed = await parse_voice_expense(tmp_path, type_names.get(expense_type, "—Ä–∞—Å—Ö–æ–¥"))
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(tmp_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await state.update_data(
            parsed_date=parsed['date'],
            parsed_amount=parsed['amount'],
            parsed_description=parsed['description'],
            parsed_payment_source=parsed.get('payment_source', 'company')
        )
        await state.set_state(AddExpenseStates.confirm_expense)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
        date_obj = datetime.strptime(parsed['date'], "%Y-%m-%d")
        
        confirm_text = f"""
‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>

üìÖ –î–∞—Ç–∞: {date_obj.strftime("%d.%m.%Y")}
üí∞ –°—É–º–º–∞: {format_currency(parsed['amount'])}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {parsed['description']}

–í—Å–µ –≤–µ—Ä–Ω–æ?
"""
        
        await message.answer(
            confirm_text.strip(),
            parse_mode="HTML",
            reply_markup=get_confirm_keyboard("expense:confirm", "expense:retry")
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º.",
            reply_markup=get_cancel_button()
        )


@router.callback_query(F.data == "expense:retry", AddExpenseStates.confirm_expense)
async def retry_expense_input(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ —Ä–∞—Å—Ö–æ–¥–∞"""
    
    await state.set_state(AddExpenseStates.waiting_input)
    data = await state.get_data()
    
    await callback.message.edit_text(
        f"üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ –µ—â—ë —Ä–∞–∑:\n\n"
        f"–û–±—ä–µ–∫—Ç: <b>{data['object_name']}</b>",
        parse_mode="HTML",
        reply_markup=get_cancel_button()
    )
    await callback.answer()


@router.callback_query(F.data == "expense:confirm", AddExpenseStates.confirm_expense)
async def confirm_expense(callback: CallbackQuery, user: User, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ - –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ–ø–ª–∞—Ç—ã"""
    
    data = await state.get_data()
    payment_source_ai = data.get('parsed_payment_source', 'company')
    
    await state.set_state(AddExpenseStates.select_payment_source)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ–ø–ª–∞—Ç—ã
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üí≥ –û–ø–ª–∞—á–µ–Ω–æ —Ñ–∏—Ä–º–æ–π",
            callback_data="payment:company"
        )],
        [InlineKeyboardButton(
            text="üí∞ –û–ø–ª–∞—á–µ–Ω–æ –ø—Ä–æ—Ä–∞–±–æ–º (–∫ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏)",
            callback_data="payment:personal"
        )],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])
    
    # –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª
    ai_hint = ""
    if payment_source_ai == "personal":
        ai_hint = "\n\nüí° <i>–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—Ä–∞–±–æ–º</i>"
    elif payment_source_ai == "company":
        ai_hint = "\n\nüí° <i>–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –æ–ø–ª–∞—Ç–∞ —Ñ–∏—Ä–º–æ–π</i>"
    
    await callback.message.edit_text(
        f"üí≥ <b>–ö—Ç–æ –æ–ø–ª–∞—Ç–∏–ª —Ä–∞—Å—Ö–æ–¥?</b>{ai_hint}",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("payment:"), AddExpenseStates.select_payment_source)
async def select_payment_source(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ–ø–ª–∞—Ç—ã"""
    
    payment_source = callback.data.split(":")[1]  # company –∏–ª–∏ personal
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    await state.update_data(selected_payment_source=payment_source)
    await state.set_state(AddExpenseStates.waiting_photo)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="expense:skip_photo")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])
    
    await callback.message.edit_text(
        "üì∏ <b>–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞?</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@router.message(AddExpenseStates.waiting_photo, F.photo)
async def process_expense_photo(message: Message, user: User, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞"""
    
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ)
    photo = message.photo[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ö–æ–¥ –≤ –ë–î
    expense_type = ExpenseType[data['expense_type'].upper()]
    date_obj = datetime.strptime(data['parsed_date'], "%Y-%m-%d")
    
    photo_url = None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ PostgreSQL
    try:
        from bot.services.file_service import FileService
        file_service = FileService(message.bot)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –ë–î
        saved_file = await file_service.save_photo(
            session=session,
            photo=photo,
            object_id=data['object_id'],
            file_type=FileType.RECEIPT
        )
        
        if saved_file:
            photo_url = f"file_{saved_file.id}"  # –•—Ä–∞–Ω–∏–º ID —Ñ–∞–π–ª–∞ –≤ –ë–î
            print(f"‚úÖ –§–æ—Ç–æ —á–µ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (ID: {saved_file.id})")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ: {e}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –æ–ø–ª–∞—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
    payment_source_str = data.get('selected_payment_source', 'company')
    payment_source = PaymentSource.COMPANY if payment_source_str == 'company' else PaymentSource.PERSONAL
    compensation_status = CompensationStatus.PENDING if payment_source == PaymentSource.PERSONAL else None
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ö–æ–¥
    expense = await create_expense(
        session=session,
        object_id=data['object_id'],
        expense_type=expense_type,
        amount=data['parsed_amount'],
        description=data['parsed_description'],
        date=date_obj,
        added_by=user.id,
        photo_url=photo_url,
        payment_source=payment_source,
        compensation_status=compensation_status
    )
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ <b>–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"–û–±—ä–µ–∫—Ç: {data['object_name']}\n"
        f"–°—É–º–º–∞: {format_currency(data['parsed_amount'])}\n"
        f"–î–∞—Ç–∞: {date_obj.strftime('%d.%m.%Y')}\n"
        f"{'üì∏ –§–æ—Ç–æ —á–µ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ' if photo_url else ''}",
        parse_mode="HTML"
    )


@router.callback_query(F.data == "expense:skip_photo", AddExpenseStates.waiting_photo)
async def skip_expense_photo(callback: CallbackQuery, user: User, session: AsyncSession, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"""
    
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ö–æ–¥ –±–µ–∑ —Ñ–æ—Ç–æ
    expense_type = ExpenseType[data['expense_type'].upper()]
    date_obj = datetime.strptime(data['parsed_date'], "%Y-%m-%d")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –æ–ø–ª–∞—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
    payment_source_str = data.get('selected_payment_source', 'company')
    payment_source = PaymentSource.COMPANY if payment_source_str == 'company' else PaymentSource.PERSONAL
    compensation_status = CompensationStatus.PENDING if payment_source == PaymentSource.PERSONAL else None
    
    expense = await create_expense(
        session=session,
        object_id=data['object_id'],
        expense_type=expense_type,
        amount=data['parsed_amount'],
        description=data['parsed_description'],
        date=date_obj,
        added_by=user.id,
        payment_source=payment_source,
        compensation_status=compensation_status
    )
    
    await state.clear()
    
    await callback.message.edit_text(
        f"‚úÖ <b>–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"–û–±—ä–µ–∫—Ç: {data['object_name']}\n"
        f"–°—É–º–º–∞: {format_currency(data['parsed_amount'])}\n"
        f"–î–∞—Ç–∞: {date_obj.strftime('%d.%m.%Y')}",
        parse_mode="HTML"
    )
    await callback.answer("‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω")


# ============ –ê–í–ê–ù–°–´ ============

@router.callback_query(F.data.startswith("advance:add:"))
async def start_add_advance(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤–∞–Ω—Å–∞"""
    
    object_id = int(callback.data.split(":")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–∫—Ç
    obj = await get_object_by_id(session, object_id, load_relations=False)
    if not obj:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(
        object_id=object_id,
        object_name=obj.name
    )
    await state.set_state(AddAdvanceStates.waiting_input)
    
    await callback.message.edit_text(
        f"üíµ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤–∞–Ω—Å–∞</b>\n\n"
        f"–û–±—ä–µ–∫—Ç: <b>{obj.name}</b>\n\n"
        f"–û–ø–∏—à–∏—Ç–µ –∞–≤–∞–Ω—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º):\n\n"
        f"–ü—Ä–∏–º–µ—Ä—ã:\n"
        f"‚Ä¢ \"–ò–≤–∞–Ω–æ–≤, –∫–ª–∞–¥–∫–∞ –∫–∏—Ä–ø–∏—á–∞, 15000 —Ä—É–±–ª–µ–π, 20 –æ–∫—Ç—è–±—Ä—è\"\n"
        f"‚Ä¢ \"–ê–≤–∞–Ω—Å –ü–µ—Ç—Ä–æ–≤—É 10000—Ä –Ω–∞ –æ–±–ª–∏—Ü–æ–≤–∫—É\"\n"
        f"‚Ä¢ \"–°–∏–¥–æ—Ä–æ–≤ –ø–æ–ª—É—á–∏–ª 8000 –∑–∞ —à—Ç—É–∫–∞—Ç—É—Ä–∫—É\"\n\n"
        f"–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—é –∏–º—è —Ä–∞–±–æ—á–µ–≥–æ, –≤–∏–¥ —Ä–∞–±–æ—Ç, —Å—É–º–º—É –∏ –¥–∞—Ç—É.",
        parse_mode="HTML",
        reply_markup=get_cancel_button()
    )
    await callback.answer()


@router.message(AddAdvanceStates.waiting_input, F.text)
async def process_advance_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∞–≤–∞–Ω—Å–∞"""
    
    await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    # –ü–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ AI
    parsed = await parse_advance_text(message.text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data(
        parsed_worker_name=parsed['worker_name'],
        parsed_work_type=parsed['work_type'],
        parsed_amount=parsed['amount'],
        parsed_date=parsed['date']
    )
    await state.set_state(AddAdvanceStates.confirm_advance)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    date_obj = datetime.strptime(parsed['date'], "%Y-%m-%d")
    
    confirm_text = f"""
‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>

üë§ –†–∞–±–æ—á–∏–π: {parsed['worker_name'] or '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'}
‚öí –í–∏–¥ —Ä–∞–±–æ—Ç: {parsed['work_type'] or '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'}
üí∞ –°—É–º–º–∞: {format_currency(parsed['amount'])}
üìÖ –î–∞—Ç–∞: {date_obj.strftime("%d.%m.%Y")}

–í—Å–µ –≤–µ—Ä–Ω–æ?
"""
    
    await message.answer(
        confirm_text.strip(),
        parse_mode="HTML",
        reply_markup=get_confirm_keyboard("advance:confirm", "advance:retry")
    )


@router.message(AddAdvanceStates.waiting_input, F.voice)
async def process_advance_voice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∞–≤–∞–Ω—Å–∞"""
    
    await message.answer("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å...")
    
    try:
        voice = message.voice
        file = await message.bot.get_file(voice.file_id)
        
        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as tmp_file:
            tmp_path = tmp_file.name
            await message.bot.download_file(file.file_path, tmp_path)
        
        # –ü–∞—Ä—Å–∏–º –≥–æ–ª–æ—Å
        parsed = await parse_voice_advance(tmp_path)
        
        os.unlink(tmp_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.update_data(
            parsed_worker_name=parsed['worker_name'],
            parsed_work_type=parsed['work_type'],
            parsed_amount=parsed['amount'],
            parsed_date=parsed['date']
        )
        await state.set_state(AddAdvanceStates.confirm_advance)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        date_obj = datetime.strptime(parsed['date'], "%Y-%m-%d")
        
        confirm_text = f"""
‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>

üë§ –†–∞–±–æ—á–∏–π: {parsed['worker_name'] or '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'}
‚öí –í–∏–¥ —Ä–∞–±–æ—Ç: {parsed['work_type'] or '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'}
üí∞ –°—É–º–º–∞: {format_currency(parsed['amount'])}
üìÖ –î–∞—Ç–∞: {date_obj.strftime("%d.%m.%Y")}

–í—Å–µ –≤–µ—Ä–Ω–æ?
"""
        
        await message.answer(
            confirm_text.strip(),
            parse_mode="HTML",
            reply_markup=get_confirm_keyboard("advance:confirm", "advance:retry")
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º.",
            reply_markup=get_cancel_button()
        )


@router.callback_query(F.data == "advance:retry", AddAdvanceStates.confirm_advance)
async def retry_advance_input(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ –∞–≤–∞–Ω—Å–∞"""
    
    await state.set_state(AddAdvanceStates.waiting_input)
    data = await state.get_data()
    
    await callback.message.edit_text(
        f"üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∞–≤–∞–Ω—Å –µ—â—ë —Ä–∞–∑:\n\n"
        f"–û–±—ä–µ–∫—Ç: <b>{data['object_name']}</b>",
        parse_mode="HTML",
        reply_markup=get_cancel_button()
    )
    await callback.answer()


@router.callback_query(F.data == "advance:confirm", AddAdvanceStates.confirm_advance)
async def confirm_advance(callback: CallbackQuery, user: User, session: AsyncSession, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤–∞–Ω—Å–∞"""
    
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∞–≤–∞–Ω—Å
    date_obj = datetime.strptime(data['parsed_date'], "%Y-%m-%d")
    
    advance = await create_advance(
        session=session,
        object_id=data['object_id'],
        worker_name=data['parsed_worker_name'] or "–ù–µ —É–∫–∞–∑–∞–Ω",
        work_type=data['parsed_work_type'] or "–ù–µ —É–∫–∞–∑–∞–Ω",
        amount=data['parsed_amount'],
        date=date_obj,
        added_by=user.id
    )
    
    await state.clear()
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ê–≤–∞–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"–û–±—ä–µ–∫—Ç: {data['object_name']}\n"
        f"–†–∞–±–æ—á–∏–π: {data['parsed_worker_name']}\n"
        f"–í–∏–¥ —Ä–∞–±–æ—Ç: {data['parsed_work_type']}\n"
        f"–°—É–º–º–∞: {format_currency(data['parsed_amount'])}\n"
        f"–î–∞—Ç–∞: {date_obj.strftime('%d.%m.%Y')}",
        parse_mode="HTML"
    )
    await callback.answer("‚úÖ –ê–≤–∞–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω")


"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import User, UserRole
from database.crud import (
    create_user,
    get_user_by_telegram_id,
    get_all_users,
    delete_user,
    update_user_active_status,
    DeleteUserResult,
)

router = Router()


@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def admin_panel_menu(message: Message, user: User):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    if user.role != UserRole.ADMIN:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
        return
    
    help_text = """
üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/add_user <code>&lt;telegram_id&gt; &lt;role&gt;</code>
–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–†–æ–ª–∏: admin, foreman
–ü—Ä–∏–º–µ—Ä: <code>/add_user 123456789 foreman –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤</code>

/remove_user <code>&lt;telegram_id&gt;</code>
–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ü—Ä–∏–º–µ—Ä: <code>/remove_user 123456789</code>

/block_user <code>&lt;telegram_id&gt;</code>
–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

/unblock_user <code>&lt;telegram_id&gt;</code>
–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

/list_users
–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
    
    await message.answer(help_text.strip(), parse_mode="HTML")


@router.message(Command("add_user"))
async def cmd_add_user(message: Message, user: User, session: AsyncSession):
    """–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (/add_user <telegram_id> <role> <–§–ò–û>)"""

    if user.role != UserRole.ADMIN:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    parts = message.text.split()

    if len(parts) < 4:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/add_user &lt;telegram_id&gt; &lt;role&gt; &lt;–∏–º—è&gt;</code>\n\n"
            "–†–æ–ª–∏: admin, foreman\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/add_user 123456789 foreman –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤</code>",
            parse_mode="HTML"
        )
        return

    try:
        telegram_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    role_str = parts[2].lower()
    if role_str not in ["admin", "foreman"]:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: admin, foreman")
        return

    role = UserRole.ADMIN if role_str == "admin" else UserRole.FOREMAN
    full_name = " ".join(parts[3:]).strip()

    if not full_name:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Ä–æ–ª–∏.")
        return

    existing_user = await get_user_by_telegram_id(session, telegram_id)

    if existing_user:
        existing_user.role = role
        existing_user.full_name = full_name
        await session.commit()
        await message.answer(
            "‚ôªÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω.\n\n"
            f"–ò–º—è: {full_name}\n"
            f"–†–æ–ª—å: {role.value}"
        )
        return

    new_user = await create_user(
        session=session,
        telegram_id=telegram_id,
        role=role,
        full_name=full_name
    )

    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"–ò–º—è: {full_name}\n"
        f"Telegram ID: {telegram_id}\n"
        f"–†–æ–ª—å: {role.value}\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π /start"
    )


@router.message(Command("remove_user"))
async def cmd_remove_user(message: Message, user: User, session: AsyncSession):
    """
    –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –§–æ—Ä–º–∞—Ç: /remove_user <telegram_id>
    """
    
    if user.role != UserRole.ADMIN:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    parts = message.text.split()
    
    if len(parts) < 2:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/remove_user &lt;telegram_id&gt;</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/remove_user 123456789</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        telegram_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∞–º –∞–¥–º–∏–Ω
    if telegram_id == user.telegram_id:
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await delete_user(session, telegram_id)

    if result == DeleteUserResult.DELETED:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω."
        )
    elif result == DeleteUserResult.DEACTIVATED:
        await message.answer(
            "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∏–ª–∏ –æ–±—ä–µ–∫—Ç—ã, –ø–æ—ç—Ç–æ–º—É –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –æ–Ω –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π."
        )
    else:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )


@router.message(Command("block_user"))
async def cmd_block_user(message: Message, user: User, session: AsyncSession):
    """
    –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –§–æ—Ä–º–∞—Ç: /block_user <telegram_id>
    """
    
    if user.role != UserRole.ADMIN:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    parts = message.text.split()
    
    if len(parts) < 2:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/block_user &lt;telegram_id&gt;</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        telegram_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    if telegram_id == user.telegram_id:
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
        return
    
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updated_user = await update_user_active_status(session, telegram_id, False)
    
    if updated_user:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
        )
    else:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )


@router.message(Command("unblock_user"))
async def cmd_unblock_user(message: Message, user: User, session: AsyncSession):
    """
    –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –§–æ—Ä–º–∞—Ç: /unblock_user <telegram_id>
    """
    
    if user.role != UserRole.ADMIN:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    parts = message.text.split()
    
    if len(parts) < 2:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/unblock_user &lt;telegram_id&gt;</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        telegram_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updated_user = await update_user_active_status(session, telegram_id, True)
    
    if updated_user:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
        )
    else:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )


@router.message(Command("list_users"))
async def cmd_list_users(message: Message, user: User, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    if user.role != UserRole.ADMIN:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await get_all_users(session)
    
    if not users:
        await message.answer("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
    
    for u in users:
        status = "‚úÖ" if u.is_active else "‚ùå"
        role_emoji = "üëë" if u.role == UserRole.ADMIN else "üë∑"
        name = u.full_name or u.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        
        text += f"{status} {role_emoji} <b>{name}</b>\n"
        text += f"   ID: <code>{u.telegram_id}</code>\n"
        text += f"   –†–æ–ª—å: {u.role.value}\n"
        text += f"   –î–æ–±–∞–≤–ª–µ–Ω: {u.created_at.strftime('%d.%m.%Y')}\n\n"
    
    text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
    
    await message.answer(text.strip(), parse_mode="HTML")




"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (FSM)
"""
import contextlib
import os
import tempfile
from decimal import Decimal, InvalidOperation
from datetime import datetime
from typing import Any, Dict, Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Voice
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import User, UserRole
from database.crud import create_object
from bot.states.add_object_states import AddObjectStates
from bot.keyboards.main_menu import get_cancel_button, get_skip_or_cancel, get_confirm_keyboard
from bot.services.pdf_parser import (
    extract_text_from_pdf,
    parse_pdf_to_object_data,
    parse_object_correction,
)
from bot.services.ai_parser import transcribe_voice
from bot.services.calculations import format_currency

router = Router()


NUMERIC_FIELDS = {
    "prepayment",
    "final_payment",
    "estimate_s3",
    "actual_s3_discount",
    "estimate_works",
    "estimate_supplies",
    "estimate_overhead",
    "estimate_transport",
}

DATE_FIELDS = {"start_date", "end_date"}

TEXT_FIELDS = {"name", "address", "foreman_name"}

OBJECT_FIELDS = list(TEXT_FIELDS | DATE_FIELDS | NUMERIC_FIELDS)

FIELD_TITLES = {
    "name": "–ù–∞–∑–≤–∞–Ω–∏–µ",
    "address": "–ê–¥—Ä–µ—Å",
    "foreman_name": "–ë—Ä–∏–≥–∞–¥–∏—Ä",
    "start_date": "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞",
    "end_date": "–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
    "prepayment": "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞",
    "final_payment": "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞",
    "estimate_s3": "–°3 –ø–æ —Å–º–µ—Ç–µ",
    "actual_s3_discount": "–°3 —Å–æ —Å–∫–∏–¥–∫–æ–π",
    "estimate_works": "–†–∞–±–æ—Ç—ã –ø–æ —Å–º–µ—Ç–µ",
    "estimate_supplies": "–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –ø–æ —Å–º–µ—Ç–µ",
    "estimate_overhead": "–ù–∞–∫–ª–∞–¥–Ω—ã–µ –ø–æ —Å–º–µ—Ç–µ",
    "estimate_transport": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–æ —Å–º–µ—Ç–µ",
}


def _ensure_all_fields(data: Dict[str, Any]) -> Dict[str, Any]:
    return {field: data.get(field) for field in OBJECT_FIELDS}


def _convert_field_value(field: str, value: Any) -> Optional[Any]:
    if field in NUMERIC_FIELDS:
        return _to_decimal(value)
    if field in DATE_FIELDS:
        return _parse_date_value(value)
    if field in TEXT_FIELDS:
        if value is None:
            return None
        value_str = str(value).strip()
        return value_str or None
    return None


def _to_decimal(value: Any) -> Optional[Decimal]:
    if value is None:
        return None
    if isinstance(value, Decimal):
        return value
    try:
        if isinstance(value, (int, float)):
            return Decimal(str(value))
        value_str = str(value).strip()
        if not value_str:
            return None
        value_str = value_str.replace(" ", "").replace(",", ".")
        return Decimal(value_str)
    except Exception:
        return None


def _parse_date_value(value: Any) -> Optional[datetime]:
    if isinstance(value, datetime):
        return value
    if not value:
        return None
    value_str = str(value).strip()
    if not value_str:
        return None
    for fmt in ("%Y-%m-%d", "%d.%m.%Y"):
        try:
            return datetime.strptime(value_str, fmt)
        except ValueError:
            continue
    return None


def _normalize_object_data(raw: Dict[str, Any]) -> Dict[str, Any]:
    data: Dict[str, Any] = {}
    for field in TEXT_FIELDS:
        value = raw.get(field)
        data[field] = value.strip() if isinstance(value, str) else value

    for field in DATE_FIELDS:
        data[field] = _parse_date_value(raw.get(field))

    for field in NUMERIC_FIELDS:
        data[field] = _to_decimal(raw.get(field))

    return data


def _decimal_or_zero(value: Optional[Decimal]) -> Decimal:
    return value if isinstance(value, Decimal) else Decimal(0)


def _format_date(value: Optional[datetime]) -> str:
    return value.strftime("%d.%m.%Y") if isinstance(value, datetime) else "‚Äî"


def _format_currency_optional(value: Optional[Decimal]) -> str:
    if value is None:
        return "‚Äî"
    return format_currency(value)


def _build_summary_text(data: Dict[str, Any]) -> str:
    normalized = _normalize_object_data(_ensure_all_fields(data))

    prepayment = _decimal_or_zero(normalized.get("prepayment"))
    final_payment = _decimal_or_zero(normalized.get("final_payment"))
    estimate_s3 = _decimal_or_zero(normalized.get("estimate_s3"))
    actual_s3_discount = _decimal_or_zero(normalized.get("actual_s3_discount"))
    estimate_works = _decimal_or_zero(normalized.get("estimate_works"))
    estimate_supplies = _decimal_or_zero(normalized.get("estimate_supplies"))
    estimate_overhead = _decimal_or_zero(normalized.get("estimate_overhead"))
    estimate_transport = _decimal_or_zero(normalized.get("estimate_transport"))

    total_income = prepayment + final_payment
    s3_difference = estimate_s3 - actual_s3_discount

    summary = f"""
‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞</b>

üèóÔ∏è –û–±—ä–µ–∫—Ç: <b>{normalized.get('name') or '‚Äî'}</b>
üìç –ê–¥—Ä–µ—Å: {normalized.get('address') or '‚Äî'}
üë∑ –ë—Ä–∏–≥–∞–¥–∏—Ä: {normalized.get('foreman_name') or '‚Äî'}
üìÖ –ü–µ—Ä–∏–æ–¥: {_format_date(normalized.get('start_date'))} ‚Äî {_format_date(normalized.get('end_date'))}

üí∏ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {_format_currency_optional(normalized.get('prepayment'))}
–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞: {_format_currency_optional(normalized.get('final_payment'))}
–í—Å–µ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π: {format_currency(total_income)}

üìä <b>–°–º–µ—Ç–∞:</b>
üß± –°3: {_format_currency_optional(normalized.get('estimate_s3'))}
üß± –°3 —Å–æ —Å–∫–∏–¥–∫–æ–π: {_format_currency_optional(normalized.get('actual_s3_discount'))}
üîª –†–∞–∑–Ω–∏—Ü–∞ –°3: {format_currency(s3_difference)}
‚öí –†–∞–±–æ—Ç—ã: {_format_currency_optional(normalized.get('estimate_works'))}
üß∞ –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏: {_format_currency_optional(normalized.get('estimate_supplies'))}
üí∞ –ù–∞–∫–ª–∞–¥–Ω—ã–µ: {_format_currency_optional(normalized.get('estimate_overhead'))}
üöö –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {_format_currency_optional(normalized.get('estimate_transport'))}

–í—Å–µ –≤–µ—Ä–Ω–æ?
"""

    return summary.strip()


async def _prompt_manual_name(message: Message) -> None:
    text = (
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
        "–®–∞–≥ 1/12: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–í—è—á–µ—Å–ª–∞–≤ –° –ø–æ–≤–æ—Ä–æ—Ç–æ–º</i>"
    )
    markup = get_cancel_button()
    with contextlib.suppress(Exception):
        await message.edit_text(text, parse_mode="HTML", reply_markup=markup)
        return
    await message.answer(text, parse_mode="HTML", reply_markup=markup)


def _format_field_output(field: str, value: Any) -> str:
    if field in NUMERIC_FIELDS:
        return _format_currency_optional(_to_decimal(value))
    if field in DATE_FIELDS:
        return _format_date(_parse_date_value(value))
    return str(value).strip() if value else "‚Äî"


async def _apply_correction(message: Message, text: str, state: FSMContext) -> None:
    current_data = await state.get_data()
    parsed = await parse_object_correction(text, _ensure_all_fields(current_data))

    if not parsed or "field" not in parsed:
        await message.answer("‚ùå –ù–µ –ø–æ–Ω—è–ª, –∫–∞–∫–æ–µ –ø–æ–ª–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∞—á–µ.")
        return

    field = parsed.get("field")
    if field not in OBJECT_FIELDS:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ. –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°3 —Å–æ —Å–∫–∏–¥–∫–æ–π 175000').")
        return

    confidence = parsed.get("confidence")
    if isinstance(confidence, (int, float)) and confidence < 0.4:
        await message.answer("‚ö†Ô∏è –ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø–æ–Ω—è–ª. –£—Ç–æ—á–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    new_value = _convert_field_value(field, parsed.get("value"))

    if field in NUMERIC_FIELDS and new_value is None:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä '—Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ 50000'.")
        return

    if field in DATE_FIELDS and new_value is None:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –ì–ì–ì–ì-–ú–ú-–î–î.")
        return

    old_value = current_data.get(field)
    await state.update_data(**{field: new_value})

    updated_data = await state.get_data()
    summary = _build_summary_text(updated_data)

    field_title = FIELD_TITLES.get(field, field)
    await message.answer(
        f"‚úÖ {field_title}: { _format_field_output(field, old_value) } ‚Üí {_format_field_output(field, new_value)}"
    )
    await message.answer(
        summary,
        parse_mode="HTML",
        reply_markup=get_confirm_keyboard("object:save", "cancel")
    )


def _mode_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úçÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="object:create:mode:manual")],
        [InlineKeyboardButton(text="üìÑ –ò–º–ø–æ—Ä—Ç —Å–º–µ—Ç—ã (PDF)", callback_data="object:create:mode:pdf")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç")
@router.message(Command("add_object"))
async def start_add_object(message: Message, user: User, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    
    if user.role != UserRole.ADMIN:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤.")
        return
    
    await state.clear()
    await state.set_state(AddObjectStates.choose_mode)

    await message.answer(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
        "‚Ä¢ –ò–º–ø–æ—Ä—Ç —Å–º–µ—Ç—ã –∏–∑ PDF —Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º\n"
        "‚Ä¢ –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é",
        parse_mode="HTML",
        reply_markup=_mode_keyboard()
    )


@router.callback_query(AddObjectStates.choose_mode, F.data == "object:create:mode:manual")
async def select_manual_mode(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AddObjectStates.enter_name)
    await _prompt_manual_name(callback.message)


@router.callback_query(AddObjectStates.choose_mode, F.data == "object:create:mode:pdf")
async def select_pdf_mode(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AddObjectStates.waiting_pdf)

    instructions = (
        "üìÑ <b>–ò–º–ø–æ—Ä—Ç —Å–º–µ—Ç—ã</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å–º–µ—Ç—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ë–æ—Ç –∏–∑–≤–ª–µ—á—ë—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º."
    )

    with contextlib.suppress(Exception):
        await callback.message.edit_text(
            instructions,
            parse_mode="HTML",
            reply_markup=get_cancel_button()
        )
        return

    await callback.message.answer(
        instructions,
        parse_mode="HTML",
        reply_markup=get_cancel_button()
    )


@router.message(AddObjectStates.choose_mode)
async def choose_mode_message(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=_mode_keyboard()
    )


@router.message(AddObjectStates.waiting_pdf, F.document)
async def handle_pdf_upload(message: Message, state: FSMContext):
    document = message.document

    if document.mime_type != "application/pdf" and not (document.file_name or "").lower().endswith(".pdf"):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.",
            reply_markup=get_cancel_button()
        )
        return

    temp_path = None
    try:
        file = await message.bot.get_file(document.file_id)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as temp_file:
            temp_path = temp_file.name
        await message.bot.download_file(file.file_path, temp_path)

        extracted_text = await extract_text_from_pdf(temp_path)
    finally:
        if temp_path and os.path.exists(temp_path):
            os.unlink(temp_path)

    if not extracted_text.strip():
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ PDF –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.",
            reply_markup=get_cancel_button()
        )
        return

    parsed = await parse_pdf_to_object_data(extracted_text)

    if not parsed:
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–º–µ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.",
            reply_markup=get_cancel_button()
        )
        return

    normalized = _ensure_all_fields(_normalize_object_data(parsed))
    await state.update_data(**normalized, import_mode=True)
    await state.set_state(AddObjectStates.confirm_object)

    data = await state.get_data()
    summary = _build_summary_text(data)

    await message.answer(
        summary,
        parse_mode="HTML",
        reply_markup=get_confirm_keyboard("object:save", "cancel")
    )

    await message.answer(
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∞–¥—Ä–µ—Å –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥¬ª) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ.",
        reply_markup=get_cancel_button()
    )


@router.message(AddObjectStates.waiting_pdf)
async def handle_non_pdf(message: Message):
    await message.answer(
        "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å–º–µ—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.",
        reply_markup=get_cancel_button()
    )


@router.message(AddObjectStates.enter_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    
    await state.update_data(name=message.text.strip())
    await state.set_state(AddObjectStates.enter_address)
    
    await message.answer(
        "üìù –®–∞–≥ 2/12: –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
        reply_markup=get_skip_or_cancel()
    )


@router.message(AddObjectStates.enter_address)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞"""
    
    await state.update_data(address=message.text.strip())
    await state.set_state(AddObjectStates.enter_foreman)
    
    await message.answer(
        "üìù –®–∞–≥ 3/12: –í–≤–µ–¥–∏—Ç–µ –∏–º—è –±—Ä–∏–≥–∞–¥–∏—Ä–∞/–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        reply_markup=get_skip_or_cancel()
    )


@router.message(AddObjectStates.enter_foreman)
async def process_foreman(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –±—Ä–∏–≥–∞–¥–∏—Ä–∞"""
    
    await state.update_data(foreman_name=message.text.strip())
    await state.set_state(AddObjectStates.enter_dates)
    
    await message.answer(
        "üìù –®–∞–≥ 4/12: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã —Ä–∞–±–æ—Ç\n\n"
        "–§–æ—Ä–º–∞—Ç: <code>–î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì</code>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>01.11.2025 - 30.11.2025</code>\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        parse_mode="HTML",
        reply_markup=get_skip_or_cancel()
    )


@router.message(AddObjectStates.enter_dates)
async def process_dates(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç"""
    
    start_date = None
    end_date = None
    
    text = message.text.strip()
    if " - " in text or " ‚Äî " in text:
        try:
            dates = text.replace(" ‚Äî ", " - ").split(" - ")
            start_date = datetime.strptime(dates[0].strip(), "%d.%m.%Y")
            end_date = datetime.strptime(dates[1].strip(), "%d.%m.%Y")
        except:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n"
                "–§–æ—Ä–º–∞—Ç: <code>–î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì</code>",
                parse_mode="HTML"
            )
            return
    
    await state.update_data(start_date=start_date, end_date=end_date)
    await state.set_state(AddObjectStates.enter_prepayment)
    
    await message.answer(
        "üí∏ –®–∞–≥ 5/12: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã (–≤ —Ä—É–±–ª—è—Ö)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>150000</code>",
        parse_mode="HTML",
        reply_markup=get_cancel_button()
    )


@router.message(AddObjectStates.enter_prepayment)
async def process_prepayment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã"""
    
    try:
        prepayment = Decimal(message.text.strip().replace(" ", "").replace(",", "."))
        if prepayment < 0:
            raise ValueError
    except:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150000):"
        )
        return
    
    await state.update_data(prepayment=prepayment)
    await state.set_state(AddObjectStates.enter_final_payment)
    
    await message.answer(
        "üí∏ –®–∞–≥ 6/12: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã (–≤ —Ä—É–±–ª—è—Ö)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>350000</code>",
        parse_mode="HTML",
        reply_markup=get_cancel_button()
    )


@router.message(AddObjectStates.enter_final_payment)
async def process_final_payment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    
    try:
        final_payment = Decimal(message.text.strip().replace(" ", "").replace(",", "."))
        if final_payment < 0:
            raise ValueError
    except:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 350000):"
        )
        return
    
    await state.update_data(final_payment=final_payment)
    await state.set_state(AddObjectStates.enter_estimate_s3)
    
    await message.answer(
        "üß± –®–∞–≥ 7/12: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –°3 –ø–æ —Å–º–µ—Ç–µ (–≤ —Ä—É–±–ª—è—Ö)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>200000</code>",
        parse_mode="HTML",
        reply_markup=get_cancel_button()
    )


@router.message(AddObjectStates.enter_estimate_s3)
async def process_estimate_s3(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –°3 –ø–æ —Å–º–µ—Ç–µ"""
    
    try:
        estimate_s3 = Decimal(message.text.strip().replace(" ", "").replace(",", "."))
        if estimate_s3 < 0:
            raise ValueError
    except:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
        )
        return
    
    await state.update_data(estimate_s3=estimate_s3)
    await state.set_state(AddObjectStates.enter_actual_s3_discount)
    
    await message.answer(
        "üß± –®–∞–≥ 8/12: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –°3 —Å–æ —Å–∫–∏–¥–∫–æ–π (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å) –≤ —Ä—É–±–ª—è—Ö\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>180000</code>",
        parse_mode="HTML",
        reply_markup=get_cancel_button()
    )


@router.message(AddObjectStates.enter_actual_s3_discount)
async def process_actual_s3_discount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –°3 —Å–æ —Å–∫–∏–¥–∫–æ–π"""

    try:
        actual_s3_discount = Decimal(message.text.strip().replace(" ", "").replace(",", "."))
        if actual_s3_discount < 0:
            raise ValueError
    except:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
        )
        return

    await state.update_data(actual_s3_discount=actual_s3_discount)
    await state.set_state(AddObjectStates.enter_estimate_works)

    await message.answer(
        "‚öí –®–∞–≥ 9/12: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞–±–æ—Ç –ø–æ —Å–º–µ—Ç–µ (–≤ —Ä—É–±–ª—è—Ö)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>150000</code>",
        parse_mode="HTML",
        reply_markup=get_cancel_button()
    )


@router.message(AddObjectStates.enter_estimate_works)
async def process_estimate_works(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç –ø–æ —Å–º–µ—Ç–µ"""
    
    try:
        estimate_works = Decimal(message.text.strip().replace(" ", "").replace(",", "."))
        if estimate_works < 0:
            raise ValueError
    except:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
        )
        return
    
    await state.update_data(estimate_works=estimate_works)
    await state.set_state(AddObjectStates.enter_estimate_supplies)
    
    await message.answer(
        "üß∞ –®–∞–≥ 10/12: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –ø–æ —Å–º–µ—Ç–µ (–≤ —Ä—É–±–ª—è—Ö)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>50000</code>",
        parse_mode="HTML",
        reply_markup=get_cancel_button()
    )


@router.message(AddObjectStates.enter_estimate_supplies)
async def process_estimate_supplies(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –ø–æ —Å–º–µ—Ç–µ"""
    
    try:
        estimate_supplies = Decimal(message.text.strip().replace(" ", "").replace(",", "."))
        if estimate_supplies < 0:
            raise ValueError
    except:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
        )
        return
    
    await state.update_data(estimate_supplies=estimate_supplies)
    await state.set_state(AddObjectStates.enter_estimate_overhead)
    
    await message.answer(
        "üí∞ –®–∞–≥ 11/12: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ —Å–º–µ—Ç–µ (–≤ —Ä—É–±–ª—è—Ö)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>30000</code>",
        parse_mode="HTML",
        reply_markup=get_cancel_button()
    )


@router.message(AddObjectStates.enter_estimate_overhead)
async def process_estimate_overhead(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –ø–æ —Å–º–µ—Ç–µ"""
    
    try:
        estimate_overhead = Decimal(message.text.strip().replace(" ", "").replace(",", "."))
        if estimate_overhead < 0:
            raise ValueError
    except:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
        )
        return
    
    await state.update_data(estimate_overhead=estimate_overhead)
    await state.set_state(AddObjectStates.enter_estimate_transport)
    
    await message.answer(
        "üöö –®–∞–≥ 12/12: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ —Å–º–µ—Ç–µ (–≤ —Ä—É–±–ª—è—Ö)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>40000</code>",
        parse_mode="HTML",
        reply_markup=get_cancel_button()
    )


@router.message(AddObjectStates.enter_estimate_transport)
async def process_estimate_transport(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—é–º–µ"""
    
    try:
        estimate_transport = Decimal(message.text.strip().replace(" ", "").replace(",", "."))
        if estimate_transport < 0:
            raise ValueError
    except:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
        )
        return
    
    await state.update_data(estimate_transport=estimate_transport)
    await state.set_state(AddObjectStates.confirm_object)
    
    data = await state.get_data()
    summary = _build_summary_text(data)

    await message.answer(
        summary,
        parse_mode="HTML",
        reply_markup=get_confirm_keyboard("object:save", "cancel")
    )


@router.callback_query(F.data == "object:save", AddObjectStates.confirm_object)
async def save_object(callback: CallbackQuery, user: User, session: AsyncSession, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    data = await state.get_data()
    normalized = _normalize_object_data(_ensure_all_fields(data))

    payload = normalized.copy()
    for field in NUMERIC_FIELDS:
        payload[field] = payload[field] if payload[field] is not None else Decimal(0)

    if not payload.get("name"):
        await callback.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ –ë–î
    try:
        obj = await create_object(
            session=session,
            name=payload['name'],
            created_by=user.id,
            address=payload.get('address'),
            foreman_name=payload.get('foreman_name'),
            start_date=payload.get('start_date'),
            end_date=payload.get('end_date'),
            prepayment=payload['prepayment'],
            final_payment=payload['final_payment'],
            estimate_s3=payload['estimate_s3'],
            estimate_works=payload['estimate_works'],
            estimate_supplies=payload['estimate_supplies'],
            estimate_overhead=payload['estimate_overhead'],
            estimate_transport=payload['estimate_transport'],
            actual_s3_discount=payload['actual_s3_discount']
        )
        
        await state.clear()
        
        await callback.message.edit_text(
            f"‚úÖ <b>–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"–û–±—ä–µ–∫—Ç <b>'{obj.name}'</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¢–µ–∫—É—â–∏–µ –æ–±—ä–µ–∫—Ç—ã.\n\n"
            f"ID –æ–±—ä–µ–∫—Ç–∞: {obj.id}",
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω")
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞:\n{str(e)}"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.message(AddObjectStates.confirm_object, F.text)
async def handle_text_correction(message: Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.")
        return

    await _apply_correction(message, text, state)


@router.message(AddObjectStates.confirm_object, F.voice)
async def handle_voice_correction(message: Message, state: FSMContext):
    voice: Voice = message.voice
    file = await message.bot.get_file(voice.file_id)
    temp_path = None
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as temp_file:
            temp_path = temp_file.name
        await message.bot.download_file(file.file_path, temp_path)
        text = await transcribe_voice(temp_path)
    finally:
        if temp_path and os.path.exists(temp_path):
            os.unlink(temp_path)

    if not text:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑.")
        return

    await _apply_correction(message, text, state)


@router.callback_query(F.data == "skip")
async def skip_step(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —à–∞–≥"""
    
    current_state = await state.get_state()
    
    if current_state == AddObjectStates.enter_address.state:
        await state.update_data(address=None)
        await state.set_state(AddObjectStates.enter_foreman)
        await callback.message.edit_text(
            "üìù –®–∞–≥ 3/12: –í–≤–µ–¥–∏—Ç–µ –∏–º—è –±—Ä–∏–≥–∞–¥–∏—Ä–∞/–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
            reply_markup=get_skip_or_cancel()
        )
    
    elif current_state == AddObjectStates.enter_foreman.state:
        await state.update_data(foreman_name=None)
        await state.set_state(AddObjectStates.enter_dates)
        await callback.message.edit_text(
            "üìù –®–∞–≥ 4/12: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã —Ä–∞–±–æ—Ç\n\n"
            "–§–æ—Ä–º–∞—Ç: <code>–î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>01.11.2025 - 30.11.2025</code>\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
            parse_mode="HTML",
            reply_markup=get_skip_or_cancel()
        )
    
    elif current_state == AddObjectStates.enter_dates.state:
        await state.update_data(start_date=None, end_date=None)
        await state.set_state(AddObjectStates.enter_prepayment)
        await callback.message.edit_text(
            "üí∏ –®–∞–≥ 5/12: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã (–≤ —Ä—É–±–ª—è—Ö)\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>150000</code>",
            parse_mode="HTML",
            reply_markup=get_cancel_button()
        )
    
    await callback.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ")


@router.callback_query(F.data == "cancel")
async def cancel_creation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    with contextlib.suppress(Exception):
        await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

